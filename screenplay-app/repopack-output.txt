================================================================
Repopack Output File
================================================================

This file was generated by Repopack on: 2024-08-27T03:19:47.342Z

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Repository structure
3. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
  distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.



For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
app/
  (auth)/
    sign-in/
      page.tsx
    sign-up/
      page.tsx
  (dashboard)/
    layout.tsx
  characters/
    page.tsx
  project/
    [id]/
      characters/
        page.tsx
      scenes/
        page.tsx
      script/
        page.tsx
      timeline/
        page.tsx
      page.tsx
  scenes/
    page.tsx
  workspace/
    page,tsx
  globals.css
  layout.tsx
  page.tsx
components/
  auth/
    sign-in.tsx
    sign-up.tsx
  characters/
    character-management.tsx
    CharacterAppearances.tsx
    CharacterArc.tsx
    CharacterDialogueStats.tsx
    CharacterGallery.tsx
    CharacterProfile.tsx
    CharacterRelationships.tsx
  scenes/
    scene-block.tsx
    scene-canvas.tsx
    scene-connection.tsx
    scene-editor.tsx
    SceneGoalsConflict.tsx
    SceneHistory.tsx
    SceneNotes.tsx
    SceneOutline.tsx
  screenplay/
    full-screenplay-view.tsx
    ScreenplaySettings.tsx
    ScriptExport.tsx
  story/
    StoryStructure.tsx
  timeline/
    StoryTimeline.tsx
  ui/
    badge.tsx
    button.tsx
    card.tsx
    dialog.tsx
    dropdown-menu.tsx
    input.tsx
    label.tsx
    progress.tsx
    scroll-area.tsx
    select.tsx
    separator.tsx
    table.tsx
    tabs.tsx
    textarea.tsx
    toast.tsx
    toaster.tsx
    use-toast.ts
  sidebar.tsx
  WithProjectProtection.tsx
lib/
  contexts/
    ProjectContext.tsx
  hooks/
    useRealtimeCollaboration.ts
  types.ts
  utils.ts
package.json
tailwind.config.js

================================================================
Repository Files
================================================================

================
File: app/(auth)/sign-in/page.tsx
================
import { SignIn } from '@/components/auth/sign-in'

export default function SignInPage() {
  return <SignIn />
}

================
File: app/(auth)/sign-up/page.tsx
================
import { SignUp } from '@/components/auth/sign-up'

export default function SignUpPage() {
  return <SignUp />
}

================
File: app/(dashboard)/layout.tsx
================
import { Sidebar } from '@/components/sidebar'

export default function DashboardLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <div className="flex h-screen bg-gray-100">
      <Sidebar />
      <main className="flex-1 overflow-y-auto p-8">
        {children}
      </main>
    </div>
  )
}

================
File: app/characters/page.tsx
================
import React from 'react'
import { CharacterManagement } from '@/components/characters/character-management'
import { WithProjectProtection } from '@/components/WithProjectProtection'
import { useProject } from '@/lib/contexts/ProjectContext'

function CharactersPage() {
  const { currentProject } = useProject()

  return (
    <div className="space-y-8">
      <h1 className="text-4xl font-bold">Character Management for {currentProject?.title}</h1>
      <CharacterManagement projectId={currentProject?.id || ''} />
    </div>
  )
}

export default WithProjectProtection(CharactersPage)

================
File: app/project/[id]/characters/page.tsx
================
'use client'

import React from 'react'
import { CharacterManagement } from '@/components/characters/character-management'
import { WithProjectProtection } from '@/components/WithProjectProtection'
import { useProject } from '@/lib/contexts/ProjectContext'
import { useParams } from 'next/navigation'

function CharactersPage() {
  const { id } = useParams()
  const { currentProject } = useProject()

  return (
    <div className="space-y-8">
      <h1 className="text-4xl font-bold">Character Management for {currentProject?.title}</h1>
      <CharacterManagement projectId={id as string} />
    </div>
  )
}

export default WithProjectProtection(CharactersPage)

================
File: app/project/[id]/scenes/page.tsx
================
'use client';

import React, { useState, useEffect } from 'react'
import { SceneCanvas } from '@/components/scenes/scene-canvas'
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { PlusCircle, Film, BookOpen } from 'lucide-react'
import { useParams } from 'next/navigation'
import { FullScreenplayView } from '@/components/screenplay/full-screenplay-view'
import { Scene } from '@/lib/types'
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { useProject } from '@/lib/contexts/ProjectContext'
import { useToast } from "@/components/ui/use-toast"
import { WithProjectProtection } from '@/components/WithProjectProtection'

function ScenesPage() {
  const { id } = useParams()
  const { currentProject } = useProject()
  const { toast } = useToast()
  const [scenes, setScenes] = useState<Scene[]>([])
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    if (currentProject) {
      // Fetch scenes for the current project
      // This is where you'd typically make an API call
      setLoading(true)
      // Simulating API call with setTimeout
      setTimeout(() => {
        setScenes([
          { id: '1', title: 'Opening Scene', content: 'FADE IN...', order: 1, position: { x: 0, y: 0 }, connections: [], color: '#FFB3BA', type: 'scene' },
          { id: '2', title: 'Climax', content: 'The hero faces the villain...', order: 2, position: { x: 0, y: 0 }, connections: [], color: '#BAFFC9', type: 'scene' },
        ])
        setLoading(false)
      }, 1000)
    } else {
      toast({
        title: "No project selected",
        description: "Please select a project to view scenes.",
        variant: "destructive",
      })
    }
  }, [currentProject, toast])

  const handleAddScene = () => {
    if (!currentProject) {
      toast({
        title: "Cannot add scene",
        description: "Please select a project first.",
        variant: "destructive",
      })
      return
    }

    const newScene: Scene = {
      id: `scene-${Date.now()}`,
      title: 'New Scene',
      content: '',
      order: scenes.length + 1,
      position: { x: Math.random() * 500, y: Math.random() * 500 },
      connections: [],
      color: `#${Math.floor(Math.random()*16777215).toString(16)}`,
      type: 'scene'
    }
    setScenes([...scenes, newScene])
  }

  if (loading) {
    return <div>Loading scenes...</div>
  }

  return (
    <div className="space-y-8">
      <div className="flex justify-between items-center">
        <h1 className="text-4xl font-bold">Scenes for {currentProject?.title}</h1>
        <Button onClick={handleAddScene}>
          <PlusCircle className="mr-2 h-4 w-4" /> New Scene
        </Button>
      </div>

      <Tabs defaultValue="canvas" className="w-full">
        <TabsList>
          <TabsTrigger value="canvas">Visual Canvas</TabsTrigger>
          <TabsTrigger value="list">Scene List</TabsTrigger>
          <TabsTrigger value="full">Full Screenplay</TabsTrigger>
        </TabsList>
        <TabsContent value="canvas">
          <Card>
            <CardHeader>
              <CardTitle>Scene Canvas</CardTitle>
              <CardDescription>Visualize and organize your screenplay scenes</CardDescription>
            </CardHeader>
            <CardContent>
              <SceneCanvas projectId={id as string} />
            </CardContent>
          </Card>
        </TabsContent>
        <TabsContent value="list">
          <Card>
            <CardHeader>
              <CardTitle>Scene List</CardTitle>
              <CardDescription>View and manage your scenes in a list format</CardDescription>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Order</TableHead>
                    <TableHead>Title</TableHead>
                    <TableHead>Content Preview</TableHead>
                    <TableHead>Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {scenes.map((scene) => (
                    <TableRow key={scene.id}>
                      <TableCell>{scene.order}</TableCell>
                      <TableCell>{scene.title}</TableCell>
                      <TableCell>{scene.content.substring(0, 50)}...</TableCell>
                      <TableCell>
                        <Button variant="ghost">Edit</Button>
                        <Button variant="ghost">Delete</Button>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        </TabsContent>
        <TabsContent value="full">
          <Card>
            <CardHeader>
              <CardTitle>Full Screenplay</CardTitle>
              <CardDescription>View your entire screenplay</CardDescription>
            </CardHeader>
            <CardContent>
              <FullScreenplayView scenes={scenes} />
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}

export default WithProjectProtection(ScenesPage)

================
File: app/project/[id]/script/page.tsx
================
'use client'

import React, { useState, useEffect } from 'react'
import { WithProjectProtection } from '@/components/WithProjectProtection'
import { useProject } from '@/lib/contexts/ProjectContext'
import { useParams } from 'next/navigation'
import { FullScreenplayView } from '@/components/screenplay/full-screenplay-view'
import { Scene } from '@/lib/types'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"

function ScriptPage() {
  const { id } = useParams()
  const { currentProject } = useProject()
  const [scenes, setScenes] = useState<Scene[]>([])

  useEffect(() => {
    // Fetch scenes for the current project
    // This is where you'd typically make an API call
    // For now, we'll use mock data
    setScenes([
      { id: '1', title: 'Opening Scene', content: 'FADE IN...', order: 1, position: { x: 0, y: 0 }, connections: [], color: '#FFB3BA', type: 'scene' },
      { id: '2', title: 'Climax', content: 'The hero faces the villain...', order: 2, position: { x: 0, y: 0 }, connections: [], color: '#BAFFC9', type: 'scene' },
    ])
  }, [id])

  return (
    <div className="space-y-8">
      <h1 className="text-4xl font-bold">Full Script for {currentProject?.title}</h1>
      <Card>
        <CardHeader>
          <CardTitle>Full Screenplay</CardTitle>
          <CardDescription>View and export your entire screenplay</CardDescription>
        </CardHeader>
        <CardContent>
          <FullScreenplayView scenes={scenes} />
        </CardContent>
      </Card>
    </div>
  )
}

export default WithProjectProtection(ScriptPage)

================
File: app/project/[id]/timeline/page.tsx
================
'use client'

import React from 'react'
import { WithProjectProtection } from '@/components/WithProjectProtection'
import { useProject } from '@/lib/contexts/ProjectContext'
import { useParams } from 'next/navigation'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"

function TimelinePage() {
  const { id } = useParams()
  const { currentProject } = useProject()

  return (
    <div className="space-y-8">
      <h1 className="text-4xl font-bold">Timeline for {currentProject?.title}</h1>
      <Card>
        <CardHeader>
          <CardTitle>Project Timeline</CardTitle>
          <CardDescription>Visualize your story's timeline</CardDescription>
        </CardHeader>
        <CardContent>
          <p>Timeline feature coming soon...</p>
        </CardContent>
      </Card>
    </div>
  )
}

export default WithProjectProtection(TimelinePage)

================
File: app/project/[id]/page.tsx
================
'use client'

import React, { useEffect, useState } from 'react'
import { useParams } from 'next/navigation'
import { useProject } from '@/lib/contexts/ProjectContext'
import { WithProjectProtection } from '@/components/WithProjectProtection'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { PenTool, Users, Book, Calendar, Activity } from 'lucide-react'
import Link from 'next/link'
import { ScrollArea } from "@/components/ui/scroll-area"
import { Progress } from "@/components/ui/progress"
import { StoryTimeline } from '@/components/timeline/StoryTimeline'
import { StoryStructure } from '@/components/story/StoryStructure'
import { ScriptExport } from '@/components/screenplay/ScriptExport'
import { Scene } from '@/lib/types'

function ProjectHomePage() {
  const { id } = useParams()
  const { currentProject, setCurrentProject } = useProject()
  const [scenes, setScenes] = useState<Scene[]>([])

  useEffect(() => {
    // Fetch project details and scenes
    // This is where you'd make API calls to get the project data
    const fetchProjectData = async () => {
      if (id) {
        // Simulating API call
        const mockProject = {
          id: id as string,
          title: `Project ${id}`,
          description: `Description for Project ${id}`,
        }
        setCurrentProject(mockProject)

        // Simulating scenes fetch
        const mockScenes: Scene[] = [
          { id: '1', title: 'Opening Scene', content: 'FADE IN...', order: 1, position: { x: 0, y: 0 }, connections: [], color: '#FFB3BA', type: 'scene', characters: [], storyPhase: 'Act 1: Setup' },
          { id: '2', title: 'Climax', content: 'The hero faces the villain...', order: 2, position: { x: 0, y: 0 }, connections: [], color: '#BAFFC9', type: 'scene', characters: [], storyPhase: 'Act 2: Confrontation' },
        ]
        setScenes(mockScenes)
      }
    }

    fetchProjectData()
  }, [id, setCurrentProject])

  const handleUpdateScenes = (updatedScenes: Scene[]) => {
    setScenes(updatedScenes)
    // Here you would also update the scenes in your backend
  }

  if (!currentProject) {
    return <div>Loading...</div>
  }

  return (
    <div className="space-y-6">
      <h1 className="text-4xl font-bold">{currentProject.title}</h1>
      <p className="text-xl text-muted-foreground">{currentProject.description}</p>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Scenes</CardTitle>
            <PenTool className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{scenes.length}</div>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Characters</CardTitle>
            <Users className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{/* Add character count here */}</div>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Word Count</CardTitle>
            <Book className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{/* Add word count here */}</div>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Project Progress</CardTitle>
            <Activity className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {/* Add progress percentage here */}
              <Progress value={65} className="mt-2" />
            </div>
          </CardContent>
        </Card>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardTitle>Story Timeline</CardTitle>
          </CardHeader>
          <CardContent>
            <StoryTimeline scenes={scenes} />
          </CardContent>
        </Card>
        <Card>
          <CardHeader>
            <CardTitle>Story Structure</CardTitle>
          </CardHeader>
          <CardContent>
            <StoryStructure scenes={scenes} onUpdateScenes={handleUpdateScenes} />
          </CardContent>
        </Card>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>Script Export</CardTitle>
        </CardHeader>
        <CardContent>
          <ScriptExport scenes={scenes} />
        </CardContent>
      </Card>

      <div className="flex justify-end space-x-4">
        <Link href={`/project/${id}/scenes`} passHref>
          <Button>
            <PenTool className="mr-2 h-4 w-4" /> Manage Scenes
          </Button>
        </Link>
        <Link href={`/project/${id}/characters`} passHref>
          <Button>
            <Users className="mr-2 h-4 w-4" /> Manage Characters
          </Button>
        </Link>
      </div>
    </div>
  )
}

export default WithProjectProtection(ProjectHomePage)

================
File: app/scenes/page.tsx
================
'use client';

import React, { useState, useEffect } from 'react'
import { SceneCanvas } from '@/components/scenes/scene-canvas'
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { PlusCircle, Film, BookOpen } from 'lucide-react'
import { useSearchParams } from 'next/navigation'
import { FullScreenplayView } from '@/components/screenplay/full-screenplay-view'
import { Scene } from '@/lib/types'
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { useProject } from '@/lib/contexts/ProjectContext'
import { useToast } from "@/components/ui/use-toast"
import { WithProjectProtection } from '@/components/WithProjectProtection'

function ScenesPage() {
  const searchParams = useSearchParams()
  const { currentProject } = useProject()
  const { toast } = useToast()
  const [scenes, setScenes] = useState<Scene[]>([])
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    if (currentProject) {
      // Fetch scenes for the current project
      // This is where you'd typically make an API call
      setLoading(true)
      // Simulating API call with setTimeout
      setTimeout(() => {
        setScenes([
          { id: '1', title: 'Opening Scene', content: 'FADE IN...', order: 1, position: { x: 0, y: 0 }, connections: [], color: '#FFB3BA', type: 'scene' },
          { id: '2', title: 'Climax', content: 'The hero faces the villain...', order: 2, position: { x: 0, y: 0 }, connections: [], color: '#BAFFC9', type: 'scene' },
        ])
        setLoading(false)
      }, 1000)
    } else {
      toast({
        title: "No project selected",
        description: "Please select a project to view scenes.",
        variant: "destructive",
      })
    }
  }, [currentProject, toast])

  const handleAddScene = () => {
    if (!currentProject) {
      toast({
        title: "Cannot add scene",
        description: "Please select a project first.",
        variant: "destructive",
      })
      return
    }

    const newScene: Scene = {
      id: `scene-${Date.now()}`,
      title: 'New Scene',
      content: '',
      order: scenes.length + 1,
      position: { x: Math.random() * 500, y: Math.random() * 500 },
      connections: [],
      color: `#${Math.floor(Math.random()*16777215).toString(16)}`,
      type: 'scene'
    }
    setScenes([...scenes, newScene])
  }

  if (loading) {
    return <div>Loading scenes...</div>
  }

  return (
    <div className="space-y-8">
      <div className="flex justify-between items-center">
        <h1 className="text-4xl font-bold">Scenes for {currentProject?.title}</h1>
        <Button onClick={handleAddScene}>
          <PlusCircle className="mr-2 h-4 w-4" /> New Scene
        </Button>
      </div>

      <Tabs defaultValue="canvas" className="w-full">
        <TabsList>
          <TabsTrigger value="canvas">Visual Canvas</TabsTrigger>
          <TabsTrigger value="list">Scene List</TabsTrigger>
          <TabsTrigger value="full">Full Screenplay</TabsTrigger>
        </TabsList>
        <TabsContent value="canvas">
          <Card>
            <CardHeader>
              <CardTitle>Scene Canvas</CardTitle>
              <CardDescription>Visualize and organize your screenplay scenes</CardDescription>
            </CardHeader>
            <CardContent>
              <SceneCanvas projectId={currentProject?.id || null} />
            </CardContent>
          </Card>
        </TabsContent>
        <TabsContent value="list">
          <Card>
            <CardHeader>
              <CardTitle>Scene List</CardTitle>
              <CardDescription>View and manage your scenes in a list format</CardDescription>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Order</TableHead>
                    <TableHead>Title</TableHead>
                    <TableHead>Content Preview</TableHead>
                    <TableHead>Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {scenes.map((scene) => (
                    <TableRow key={scene.id}>
                      <TableCell>{scene.order}</TableCell>
                      <TableCell>{scene.title}</TableCell>
                      <TableCell>{scene.content.substring(0, 50)}...</TableCell>
                      <TableCell>
                        <Button variant="ghost">Edit</Button>
                        <Button variant="ghost">Delete</Button>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        </TabsContent>
        <TabsContent value="full">
          <Card>
            <CardHeader>
              <CardTitle>Full Screenplay</CardTitle>
              <CardDescription>View your entire screenplay</CardDescription>
            </CardHeader>
            <CardContent>
              <FullScreenplayView scenes={scenes} />
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}

export default WithProjectProtection(ScenesPage)

================
File: app/workspace/page,tsx
================
'use client'

import React, { useState } from 'react'
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Progress } from "@/components/ui/progress"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { PlusCircle, Film, Users, Book, Calendar, Activity } from 'lucide-react'
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts'

// Mock data for projects
const projects = [
  { id: 1, title: "The Silent Echo", genre: "Sci-Fi", progress: 65, words: 12000, lastEdited: "2024-03-15" },
  { id: 2, title: "Whispers in the Wind", genre: "Drama", progress: 30, words: 5000, lastEdited: "2024-03-10" },
  { id: 3, title: "Neon Nights", genre: "Cyberpunk", progress: 80, words: 18000, lastEdited: "2024-03-18" },
]

// Mock data for writing progress
const writingProgressData = [
  { name: 'Mon', words: 1500 },
  { name: 'Tue', words: 2000 },
  { name: 'Wed', words: 1800 },
  { name: 'Thu', words: 2200 },
  { name: 'Fri', words: 1900 },
  { name: 'Sat', words: 1000 },
  { name: 'Sun', words: 2500 },
]

export default function WorkspacePage() {
  const [activeTab, setActiveTab] = useState("projects")

  return (
    <div className="container mx-auto px-4 py-8">
      <header className="flex justify-between items-center mb-8">
        <h1 className="text-3xl font-bold">My Workspace</h1>
        <Button>
          <PlusCircle className="mr-2 h-4 w-4" /> New Project
        </Button>
      </header>

      <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-4">
        <TabsList>
          <TabsTrigger value="projects">Projects</TabsTrigger>
          <TabsTrigger value="stats">Writing Stats</TabsTrigger>
        </TabsList>

        <TabsContent value="projects" className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {projects.map(project => (
              <Card key={project.id} className="overflow-hidden">
                <CardHeader className="bg-gradient-to-r from-blue-500 to-purple-500 text-white">
                  <CardTitle>{project.title}</CardTitle>
                  <CardDescription className="text-blue-100">{project.genre}</CardDescription>
                </CardHeader>
                <CardContent className="pt-6">
                  <div className="space-y-2">
                    <div className="flex justify-between text-sm">
                      <span>Progress</span>
                      <span>{project.progress}%</span>
                    </div>
                    <Progress value={project.progress} className="w-full" />
                    <div className="flex justify-between text-sm">
                      <span>Words</span>
                      <span>{project.words}</span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span>Last Edited</span>
                      <span>{project.lastEdited}</span>
                    </div>
                  </div>
                </CardContent>
                <CardFooter className="bg-gray-50">
                  <Button variant="outline" className="w-full">Open Project</Button>
                </CardFooter>
              </Card>
            ))}
          </div>
        </TabsContent>

        <TabsContent value="stats">
          <Card>
            <CardHeader>
              <CardTitle>Writing Progress</CardTitle>
              <CardDescription>Your daily word count for the past week</CardDescription>
            </CardHeader>
            <CardContent>
              <ResponsiveContainer width="100%" height={300}>
                <BarChart data={writingProgressData}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="name" />
                  <YAxis />
                  <Tooltip />
                  <Bar dataKey="words" fill="#8884d8" />
                </BarChart>
              </ResponsiveContainer>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      <section className="mt-12">
        <h2 className="text-2xl font-semibold mb-4">Quick Stats</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Total Projects</CardTitle>
              <Film className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{projects.length}</div>
            </CardContent>
          </Card>
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Total Words</CardTitle>
              <Book className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{projects.reduce((sum, project) => sum + project.words, 0)}</div>
            </CardContent>
          </Card>
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Avg. Progress</CardTitle>
              <Activity className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">
                {Math.round(projects.reduce((sum, project) => sum + project.progress, 0) / projects.length)}%
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Writing Streak</CardTitle>
              <Calendar className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">7 days</div>
            </CardContent>
          </Card>
        </div>
      </section>
    </div>
  )
}

================
File: app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 221.2 83.2% 53.3%;
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 221.2 83.2% 53.3%;
    --radius: 0.75rem;
  }
 
  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;
    --primary: 217.2 91.2% 59.8%;
    --primary-foreground: 222.2 47.4% 11.2%;
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 224.3 76.3% 48%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
    font-feature-settings: "rlig" 1, "calt" 1;
  }
}

.bg-gradient-text {
  @apply bg-clip-text text-transparent bg-gradient-to-r from-blue-600 to-indigo-600;
}

.transition-all {
  transition-property: all;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 150ms;
}

.shadow-smooth {
  box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
}

.hover-shadow-smooth:hover {
  box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);
}

================
File: app/layout.tsx
================
import './globals.css'
import '../styles/custom.css'
import type { Metadata } from 'next'
import { Inter } from 'next/font/google'
import { Sidebar } from '@/components/sidebar'
import { Toaster } from "@/components/ui/toaster"
import { ProjectProvider } from '@/lib/contexts/ProjectContext'

const inter = Inter({ subsets: ['latin'] })

export const metadata: Metadata = {
  title: 'Raay',
  description: 'An interactive app for developing and organizing screenplays',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <ProjectProvider>
          {children}
          <Toaster />
        </ProjectProvider>
      </body>
    </html>
  )
}

================
File: app/page.tsx
================
import React from 'react'
import Link from 'next/link'
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { PenTool, Users, Book, Calendar, ArrowRight, Sparkles } from 'lucide-react'

export default function LandingPage() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-indigo-900 to-slate-800 text-slate-100">
      <div className="container mx-auto px-4 py-8">
        <header className="flex justify-between items-center mb-16 py-6 border-b border-indigo-700">
          <h1 className="text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-indigo-400 to-cyan-400">Raay</h1>
          <nav className="space-x-4">
            <Button asChild variant="ghost" className="hover:text-indigo-400 transition-colors duration-300">
              <Link href="/sign-in">Log In</Link>
            </Button>
            <Button asChild className="bg-gradient-to-r from-indigo-500 to-cyan-500 hover:from-indigo-600 hover:to-cyan-600 transition-all duration-300 transform hover:scale-105">
              <Link href="/sign-up">Sign Up</Link>
            </Button>
          </nav>
        </header>

        <main>
          {/* Hero Section */}
          <section className="text-center py-32 mb-20">
            <h2 className="text-6xl font-bold mb-6 text-transparent bg-clip-text bg-gradient-to-r from-indigo-400 to-cyan-400">
              Craft Your Vision
            </h2>
            <p className="text-xl text-indigo-200 mb-8 max-w-2xl mx-auto">
              Raay: Where your stories come to life, frame by frame, scene by scene.
            </p>
            <Button asChild size="lg" className="px-8 py-6 text-lg rounded-full bg-gradient-to-r from-indigo-500 to-cyan-500 hover:from-indigo-600 hover:to-cyan-600 transition-all duration-300 transform hover:scale-105 hover:shadow-lg">
              <Link href="/sign-up">Begin Your Journey <ArrowRight className="ml-2 h-5 w-5" /></Link>
            </Button>
          </section>

          {/* Features Grid */}
          <section className="mb-32">
            <h3 className="text-4xl font-bold mb-16 text-center text-transparent bg-clip-text bg-gradient-to-r from-indigo-400 to-cyan-400">Craft Your Masterpiece</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
              {features.map((feature, index) => (
                <Card key={index} className="transition-all duration-300 hover:shadow-xl bg-slate-800/50 border-indigo-700 backdrop-blur-sm">
                  <CardHeader>
                    <div className="flex items-center space-x-4">
                      <div className="bg-gradient-to-r from-indigo-500 to-cyan-500 p-3 rounded-full">
                        <feature.icon className="w-6 h-6 text-white" />
                      </div>
                      <CardTitle className="text-indigo-200">{feature.title}</CardTitle>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <CardDescription className="mb-4 text-slate-300">{feature.description}</CardDescription>
                    <ul className="space-y-2">
                      {feature.benefits.map((benefit, i) => (
                        <li key={i} className="flex items-center text-sm text-indigo-200">
                          <Sparkles className="w-4 h-4 mr-2 text-cyan-400" />
                          {benefit}
                        </li>
                      ))}
                    </ul>
                  </CardContent>
                </Card>
              ))}
            </div>
          </section>

          {/* Testimonial Section */}
          <section className="mb-32 bg-gradient-to-r from-indigo-900 to-cyan-900 py-20 rounded-3xl">
            <h3 className="text-4xl font-bold mb-16 text-center text-transparent bg-clip-text bg-gradient-to-r from-indigo-400 to-cyan-400">Voices of Success</h3>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-8 max-w-6xl mx-auto">
              {testimonials.map((testimonial, index) => (
                <Card key={index} className="bg-slate-800/50 border-indigo-700 backdrop-blur-sm hover:shadow-xl transition-all duration-300">
                  <CardContent className="pt-6">
                    <p className="text-indigo-200 mb-6 italic">"{testimonial.quote}"</p>
                    <div className="flex items-center">
                      <img src={testimonial.avatar} alt={testimonial.author} className="w-12 h-12 rounded-full mr-4 border-2 border-cyan-500" />
                      <div>
                        <p className="font-semibold text-indigo-200">{testimonial.author}</p>
                        <p className="text-sm text-slate-400">{testimonial.title}</p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </section>

          {/* CTA Section */}
          <section className="text-center py-20 mb-20 bg-gradient-to-r from-indigo-600 to-cyan-600 rounded-3xl text-white">
            <h2 className="text-4xl font-bold mb-6">Ready to Bring Your Story to Life?</h2>
            <p className="text-xl mb-8 max-w-2xl mx-auto">
              Join the community of visionary screenwriters and turn your ideas into cinematic reality with Raay.
            </p>
            <Button asChild size="lg" variant="secondary" className="px-8 py-6 text-lg rounded-full bg-white text-indigo-600 hover:bg-indigo-100 transition-all duration-300 transform hover:scale-105 hover:shadow-lg">
              <Link href="/sign-up">Start Your Raay Journey</Link>
            </Button>
          </section>
        </main>

        <footer className="text-center text-indigo-300 py-8 border-t border-indigo-700">
          <p>&copy; 2024 Raay. Empowering storytellers worldwide.</p>
        </footer>
      </div>
    </div>
  )
}

const features = [
  {
    icon: PenTool,
    title: "Intuitive Writing",
    description: "Experience the fluidity of thought transformed into screenplay.",
    benefits: [
      "Distraction-free writing environment",
      "Real-time collaborative editing",
      "Customizable interface themes"
    ]
  },
  {
    icon: Users,
    title: "Character Development",
    description: "Breathe life into your characters with our advanced tools.",
    benefits: [
      "Character arc mapping",
      "Relationship dynamics visualizer",
      "Personality trait generator"
    ]
  },
  {
    icon: Book,
    title: "Smart Formatting",
    description: "Focus on your story while we handle the technical details.",
    benefits: [
      "Industry-standard formatting",
      "Automatic scene numbering",
      "Export to multiple file formats"
    ]
  },
  {
    icon: Calendar,
    title: "Project Management",
    description: "Keep your screenplay on track from concept to completion.",
    benefits: [
      "Customizable project timelines",
      "Version control and history",
      "Collaborative note-sharing"
    ]
  }
]

const testimonials = [
  {
    quote: "Raay has transformed my writing process. The intuitive interface and powerful features have elevated my scripts to new heights.",
    author: "Alexandra Chen",
    title: "Award-winning Screenwriter",
    avatar: "https://i.pravatar.cc/150?img=1"
  },
  {
    quote: "The character development tools in Raay are unparalleled. My stories have never been more dynamic and engaging.",
    author: "Marcus Jefferson",
    title: "Hollywood Filmmaker",
    avatar: "https://i.pravatar.cc/150?img=2"
  },
  {
    quote: "From outline to final draft, Raay supports every stage of my writing journey. It's an indispensable tool for any serious screenwriter.",
    author: "Sophia Nakamura",
    title: "TV Series Creator",
    avatar: "https://i.pravatar.cc/150?img=3"
  }
]

================
File: components/auth/sign-in.tsx
================
'use client'

import React, { useState } from 'react'
import { useRouter } from 'next/navigation'
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { toast } from "@/components/ui/use-toast"

export function SignIn() {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const router = useRouter()

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    // Mock authentication
    if (email === 'user@example.com' && password === 'password') {
      // Simulate setting a session or token
      localStorage.setItem('isLoggedIn', 'true')
      router.push('/workspace')
    } else {
      toast({
        title: "Error",
        description: "Invalid email or password",
        variant: "destructive",
      })
    }
  }

  return (
    <div className="min-h-screen bg-gradient-radial flex items-center justify-center">
      <Card className="w-[350px]">
        <CardHeader>
          <CardTitle>Sign In</CardTitle>
          <CardDescription>Enter your credentials to access your account</CardDescription>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit}>
            <div className="grid w-full items-center gap-4">
              <div className="flex flex-col space-y-1.5">
                <Label htmlFor="email">Email</Label>
                <Input id="email" type="email" value={email} onChange={(e) => setEmail(e.target.value)} required />
              </div>
              <div className="flex flex-col space-y-1.5">
                <Label htmlFor="password">Password</Label>
                <Input id="password" type="password" value={password} onChange={(e) => setPassword(e.target.value)} required />
              </div>
            </div>
          </form>
        </CardContent>
        <CardFooter className="flex justify-between">
          <Button variant="outline" onClick={() => router.push('/')}>Cancel</Button>
          <Button onClick={handleSubmit}>Sign In</Button>
        </CardFooter>
      </Card>
    </div>
  )
}

================
File: components/auth/sign-up.tsx
================
'use client'

import React, { useState } from 'react'
import { useRouter } from 'next/navigation'
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { toast } from "@/components/ui/use-toast"

export function SignUp() {
  const [name, setName] = useState('')
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const router = useRouter()

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    // Simulate account creation
    localStorage.setItem('isLoggedIn', 'true')
    localStorage.setItem('userName', name)
    toast({
      title: "Account created",
      description: "Welcome to Screenplay App!",
    })
    router.push('/workspace')
  }

  return (
    <div className="min-h-screen bg-gradient-radial flex items-center justify-center">
      <Card className="w-[350px]">
        <CardHeader>
          <CardTitle>Sign Up</CardTitle>
          <CardDescription>Create your account to get started</CardDescription>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit}>
            <div className="grid w-full items-center gap-4">
              <div className="flex flex-col space-y-1.5">
                <Label htmlFor="name">Name</Label>
                <Input id="name" value={name} onChange={(e) => setName(e.target.value)} required />
              </div>
              <div className="flex flex-col space-y-1.5">
                <Label htmlFor="email">Email</Label>
                <Input id="email" type="email" value={email} onChange={(e) => setEmail(e.target.value)} required />
              </div>
              <div className="flex flex-col space-y-1.5">
                <Label htmlFor="password">Password</Label>
                <Input id="password" type="password" value={password} onChange={(e) => setPassword(e.target.value)} required />
              </div>
            </div>
          </form>
        </CardContent>
        <CardFooter className="flex justify-between">
          <Button variant="outline" onClick={() => router.push('/')}>Cancel</Button>
          <Button onClick={handleSubmit}>Sign Up</Button>
        </CardFooter>
      </Card>
    </div>
  )
}

================
File: components/characters/character-management.tsx
================
'use client';

import React, { useState, useEffect } from 'react'
import { Button } from "@/components/ui/button"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { CharacterProfile } from './CharacterProfile'
import { CharacterArc } from './CharacterArc'
import { CharacterRelationships } from './CharacterRelationships'
import { CharacterDialogueStats } from './CharacterDialogueStats'
import { CharacterGallery } from './CharacterGallery'
import { Character, Scene, Relationship } from '@/lib/types'

// ... rest of the component remains the same

interface CharacterManagementProps {
  projectId: string
}

export function CharacterManagement({ projectId }: CharacterManagementProps) {
  const [characters, setCharacters] = useState<Character[]>([])
  const [scenes, setScenes] = useState<Scene[]>([])
  const [relationships, setRelationships] = useState<Relationship[]>([])
  const [selectedCharacter, setSelectedCharacter] = useState<Character | null>(null)

  useEffect(() => {
    // Fetch characters, scenes, and relationships for the project
    // This is where you'd typically make API calls
    // For now, we'll use dummy data
    setCharacters([
      { id: '1', name: 'John Doe', age: 30, occupation: 'Detective', background: '...', personality: '...', goals: '...', conflicts: '...', arc: [], images: [] },
      { id: '2', name: 'Jane Smith', age: 28, occupation: 'Lawyer', background: '...', personality: '...', goals: '...', conflicts: '...', arc: [], images: [] },
    ])
    setScenes([
      { id: '1', title: 'Opening Scene', content: 'JOHN DOE\nHello, world!', order: 1, position: { x: 0, y: 0 }, connections: [], color: '#ffffff', tags: [] },
      { id: '2', title: 'Climax', content: 'JANE SMITH\nCase closed!', order: 2, position: { x: 200, y: 0 }, connections: [], color: '#ffffff', tags: [] },
    ])
    setRelationships([
      { id: '1', character1Id: '1', character2Id: '2', type: 'Colleagues', description: 'Work together on cases' },
    ])
  }, [projectId])

  const handleCharacterUpdate = (updatedCharacter: Character) => {
    setCharacters(characters.map(char => 
      char.id === updatedCharacter.id ? updatedCharacter : char
    ))
    setSelectedCharacter(updatedCharacter)
  }

  const handleRelationshipsUpdate = (updatedRelationships: Relationship[]) => {
    setRelationships(updatedRelationships)
  }

  return (
    <div className="space-y-4">
      <div className="flex justify-between items-center">
        <h2 className="text-2xl font-bold">Character Management</h2>
        <Button onClick={() => {/* Add new character logic */}}>Add Character</Button>
      </div>
      <div className="flex">
        <div className="w-1/4 pr-4">
          {characters.map(character => (
            <Button
              key={character.id}
              onClick={() => setSelectedCharacter(character)}
              variant={selectedCharacter?.id === character.id ? 'default' : 'outline'}
              className="w-full mb-2"
            >
              {character.name}
            </Button>
          ))}
        </div>
        <div className="w-3/4">
          {selectedCharacter && (
            <Tabs defaultValue="profile">
              <TabsList>
                <TabsTrigger value="profile">Profile</TabsTrigger>
                <TabsTrigger value="arc">Character Arc</TabsTrigger>
                <TabsTrigger value="relationships">Relationships</TabsTrigger>
                <TabsTrigger value="dialogue">Dialogue Stats</TabsTrigger>
                <TabsTrigger value="gallery">Gallery</TabsTrigger>
              </TabsList>
              <TabsContent value="profile">
                <CharacterProfile
                  character={selectedCharacter}
                  onUpdate={handleCharacterUpdate}
                />
              </TabsContent>
              <TabsContent value="arc">
                <CharacterArc
                  character={selectedCharacter}
                  onUpdate={handleCharacterUpdate}
                />
              </TabsContent>
              <TabsContent value="relationships">
                <CharacterRelationships
                  characters={characters}
                  relationships={relationships}
                  onUpdate={handleRelationshipsUpdate}
                />
              </TabsContent>
              <TabsContent value="dialogue">
                <CharacterDialogueStats
                  character={selectedCharacter}
                  scenes={scenes}
                />
              </TabsContent>
              <TabsContent value="gallery">
                <CharacterGallery
                  character={selectedCharacter}
                  onUpdate={handleCharacterUpdate}
                />
              </TabsContent>
            </Tabs>
          )}
        </div>
      </div>
    </div>
  )
}

================
File: components/characters/CharacterAppearances.tsx
================
import React from 'react'
import { Character, Scene } from '@/lib/types'
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"

interface CharacterAppearancesProps {
  character: Character
  scenes: Scene[]
}

export function CharacterAppearances({ character, scenes }: CharacterAppearancesProps) {
  const appearances = scenes.filter(scene => scene.characters.includes(character.id))

  return (
    <div className="space-y-4">
      <h3 className="text-lg font-semibold">Character Appearances: {character.name}</h3>
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead>Scene</TableHead>
            <TableHead>Appearance Count</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {appearances.map((scene) => (
            <TableRow key={scene.id}>
              <TableCell>{scene.title}</TableCell>
              <TableCell>{scene.characters.filter(id => id === character.id).length}</TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </div>
  )
}

================
File: components/characters/CharacterArc.tsx
================
import React from 'react'
import { Character, Scene } from '@/lib/types'
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts'

interface CharacterArcProps {
  character: Character
  scenes: Scene[]
}

export function CharacterArc({ character, scenes }: CharacterArcProps) {
  const arcData = scenes.map((scene, index) => ({
    name: `Scene ${index + 1}`,
    arcValue: Math.random() * 10 // Replace this with actual character arc data
  }))

  return (
    <div className="space-y-4">
      <h3 className="text-lg font-semibold">Character Arc: {character.name}</h3>
      <ResponsiveContainer width="100%" height={300}>
        <LineChart data={arcData}>
          <CartesianGrid strokeDasharray="3 3" />
          <XAxis dataKey="name" />
          <YAxis />
          <Tooltip />
          <Line type="monotone" dataKey="arcValue" stroke="#8884d8" />
        </LineChart>
      </ResponsiveContainer>
    </div>
  )
}

================
File: components/characters/CharacterDialogueStats.tsx
================
import React, { useState, useEffect } from 'react'
import { Character, Scene } from '@/lib/types'
import { ScrollArea } from "@/components/ui/scroll-area"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts'

interface CharacterDialogueStatsProps {
  character: Character
  scenes: Scene[]
}

interface DialogueStats {
  totalLines: number
  totalWords: number
  averageWordsPerLine: number
  scenesWithDialogue: number
  topWords: { word: string; count: number }[]
}

export function CharacterDialogueStats({ character, scenes }: CharacterDialogueStatsProps) {
  const [stats, setStats] = useState<DialogueStats | null>(null)

  useEffect(() => {
    const calculateStats = () => {
      let totalLines = 0
      let totalWords = 0
      let scenesWithDialogue = 0
      const wordCounts: { [key: string]: number } = {}

      scenes.forEach(scene => {
        const characterLines = scene.content.split('\n').filter(line => 
          line.trim().startsWith(character.name.toUpperCase())
        )

        if (characterLines.length > 0) {
          scenesWithDialogue++
        }

        characterLines.forEach(line => {
          totalLines++
          const words = line.split(/\s+/).filter(word => word.length > 0)
          totalWords += words.length

          words.forEach(word => {
            const lowerWord = word.toLowerCase()
            wordCounts[lowerWord] = (wordCounts[lowerWord] || 0) + 1
          })
        })
      })

      const topWords = Object.entries(wordCounts)
        .sort(([, a], [, b]) => b - a)
        .slice(0, 10)
        .map(([word, count]) => ({ word, count }))

      setStats({
        totalLines,
        totalWords,
        averageWordsPerLine: totalLines > 0 ? totalWords / totalLines : 0,
        scenesWithDialogue,
        topWords
      })
    }

    calculateStats()
  }, [character, scenes])

  if (!stats) {
    return <div>Loading stats...</div>
  }

  return (
    <ScrollArea className="h-[600px] w-full rounded-md border p-4">
      <div className="space-y-4">
        <Card>
          <CardHeader>
            <CardTitle>Dialogue Overview</CardTitle>
          </CardHeader>
          <CardContent>
            <p>Total Lines: {stats.totalLines}</p>
            <p>Total Words: {stats.totalWords}</p>
            <p>Average Words per Line: {stats.averageWordsPerLine.toFixed(2)}</p>
            <p>Scenes with Dialogue: {stats.scenesWithDialogue}</p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Top 10 Most Used Words</CardTitle>
          </CardHeader>
          <CardContent>
            <ResponsiveContainer width="100%" height={300}>
              <BarChart data={stats.topWords}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="word" />
                <YAxis />
                <Tooltip />
                <Bar dataKey="count" fill="#8884d8" />
              </BarChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>
      </div>
    </ScrollArea>
  )
}

================
File: components/characters/CharacterGallery.tsx
================
import React, { useState } from 'react'
import { Button } from "@/components/ui/button"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Character } from '@/lib/types'
import Image from 'next/image'

interface CharacterGalleryProps {
  character: Character
  onUpdate: (updatedCharacter: Character) => void
}

export function CharacterGallery({ character, onUpdate }: CharacterGalleryProps) {
  const [images, setImages] = useState<string[]>(character.images || [])

  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0]
    if (file) {
      const reader = new FileReader()
      reader.onloadend = () => {
        const newImages = [...images, reader.result as string]
        setImages(newImages)
        onUpdate({ ...character, images: newImages })
      }
      reader.readAsDataURL(file)
    }
  }

  const handleRemoveImage = (index: number) => {
    const newImages = images.filter((_, i) => i !== index)
    setImages(newImages)
    onUpdate({ ...character, images: newImages })
  }

  return (
    <div className="space-y-4">
      <h3 className="text-lg font-semibold">Character Gallery</h3>
      <ScrollArea className="h-[400px] w-full rounded-md border p-4">
        <div className="grid grid-cols-3 gap-4">
          {images.map((image, index) => (
            <div key={index} className="relative">
              <Image
                src={image}
                alt={`${character.name} - Image ${index + 1}`}
                width={200}
                height={200}
                objectFit="cover"
                className="rounded-md"
              />
              <Button
                size="sm"
                variant="destructive"
                className="absolute top-2 right-2"
                onClick={() => handleRemoveImage(index)}
              >
                Remove
              </Button>
            </div>
          ))}
        </div>
      </ScrollArea>
      <div>
        <input
          type="file"
          accept="image/*"
          onChange={handleImageUpload}
          className="hidden"
          id="image-upload"
        />
        <label htmlFor="image-upload">
          <Button>Upload Image</Button>
        </label>
      </div>
    </div>
  )
}

================
File: components/characters/CharacterProfile.tsx
================
import React, { useState } from 'react'
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Character } from '@/lib/types'

interface CharacterProfileProps {
  character: Character
  onUpdate: (updatedCharacter: Character) => void
}

export function CharacterProfile({ character, onUpdate }: CharacterProfileProps) {
  const [editedCharacter, setEditedCharacter] = useState<Character>(character)

  const handleChange = (field: keyof Character, value: string) => {
    setEditedCharacter({ ...editedCharacter, [field]: value })
  }

  const handleSave = () => {
    onUpdate(editedCharacter)
  }

  return (
    <ScrollArea className="h-[600px] w-full rounded-md border p-4">
      <div className="space-y-4">
        <div>
          <Label htmlFor="name">Name</Label>
          <Input
            id="name"
            value={editedCharacter.name}
            onChange={(e) => handleChange('name', e.target.value)}
          />
        </div>
        <div>
          <Label htmlFor="age">Age</Label>
          <Input
            id="age"
            type="number"
            value={editedCharacter.age}
            onChange={(e) => handleChange('age', e.target.value)}
          />
        </div>
        <div>
          <Label htmlFor="occupation">Occupation</Label>
          <Input
            id="occupation"
            value={editedCharacter.occupation}
            onChange={(e) => handleChange('occupation', e.target.value)}
          />
        </div>
        <div>
          <Label htmlFor="background">Background</Label>
          <Textarea
            id="background"
            value={editedCharacter.background}
            onChange={(e) => handleChange('background', e.target.value)}
            rows={5}
          />
        </div>
        <div>
          <Label htmlFor="personality">Personality</Label>
          <Textarea
            id="personality"
            value={editedCharacter.personality}
            onChange={(e) => handleChange('personality', e.target.value)}
            rows={5}
          />
        </div>
        <div>
          <Label htmlFor="goals">Goals</Label>
          <Textarea
            id="goals"
            value={editedCharacter.goals}
            onChange={(e) => handleChange('goals', e.target.value)}
            rows={3}
          />
        </div>
        <div>
          <Label htmlFor="conflicts">Conflicts</Label>
          <Textarea
            id="conflicts"
            value={editedCharacter.conflicts}
            onChange={(e) => handleChange('conflicts', e.target.value)}
            rows={3}
          />
        </div>
        <Button onClick={handleSave}>Save Changes</Button>
      </div>
    </ScrollArea>
  )
}

================
File: components/characters/CharacterRelationships.tsx
================
import React, { useState } from 'react'
import { Character, Relationship } from '@/lib/types'
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Select } from "@/components/ui/select"

interface CharacterRelationshipsProps {
  characters: Character[]
  relationships: Relationship[]
  onUpdateRelationships: (relationships: Relationship[]) => void
}

export function CharacterRelationships({ characters, relationships, onUpdateRelationships }: CharacterRelationshipsProps) {
  const [newRelationship, setNewRelationship] = useState<Partial<Relationship>>({})

  const handleAddRelationship = () => {
    if (newRelationship.character1Id && newRelationship.character2Id && newRelationship.type) {
      onUpdateRelationships([...relationships, newRelationship as Relationship])
      setNewRelationship({})
    }
  }

  return (
    <div className="space-y-4">
      <h3 className="text-lg font-semibold">Character Relationships</h3>
      <div className="grid grid-cols-3 gap-2">
        <Select
          value={newRelationship.character1Id}
          onValueChange={(value) => setNewRelationship({ ...newRelationship, character1Id: value })}
        >
          <option value="">Select Character 1</option>
          {characters.map((char) => (
            <option key={char.id} value={char.id}>{char.name}</option>
          ))}
        </Select>
        <Select
          value={newRelationship.character2Id}
          onValueChange={(value) => setNewRelationship({ ...newRelationship, character2Id: value })}
        >
          <option value="">Select Character 2</option>
          {characters.map((char) => (
            <option key={char.id} value={char.id}>{char.name}</option>
          ))}
        </Select>
        <Input
          placeholder="Relationship Type"
          value={newRelationship.type || ''}
          onChange={(e) => setNewRelationship({ ...newRelationship, type: e.target.value })}
        />
      </div>
      <Button onClick={handleAddRelationship}>Add Relationship</Button>
      <ul className="space-y-2">
        {relationships.map((rel, index) => (
          <li key={index} className="flex justify-between items-center">
            <span>{characters.find(c => c.id === rel.character1Id)?.name} - {rel.type} - {characters.find(c => c.id === rel.character2Id)?.name}</span>
            <Button variant="destructive" onClick={() => onUpdateRelationships(relationships.filter((_, i) => i !== index))}>Remove</Button>
          </li>
        ))}
      </ul>
    </div>
  )
}

================
File: components/scenes/scene-block.tsx
================
import React from 'react'
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Pencil, Link, Trash, Tag } from 'lucide-react'
import { Scene } from '@/lib/types'
import { Badge } from "@/components/ui/badge"

interface SceneBlockProps extends Omit<Scene, 'connections'> {
  onMove: (id: string, newPosition: { x: number; y: number }) => void
  onEdit: (id: string) => void
  onConnect: (id: string) => void
  onDelete: (id: string) => void
  onAddTag: (id: string, tag: string) => void
}

export function SceneBlock({ id, title, content, position, color, tags, onMove, onEdit, onConnect, onDelete, onAddTag }: SceneBlockProps) {
  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement>) => {
    const startX = e.clientX
    const startY = e.clientY

    const handleMouseMove = (e: MouseEvent) => {
      const deltaX = e.clientX - startX
      const deltaY = e.clientY - startY
      onMove(id, { x: position.x + deltaX, y: position.y + deltaY })
    }

    const handleMouseUp = () => {
      document.removeEventListener('mousemove', handleMouseMove)
      document.removeEventListener('mouseup', handleMouseUp)
    }

    document.addEventListener('mousemove', handleMouseMove)
    document.addEventListener('mouseup', handleMouseUp)
  }

  const handleAddTag = () => {
    const tag = prompt("Enter a new tag:")
    if (tag) {
      onAddTag(id, tag)
    }
  }

  return (
    <Card
      className="w-64 absolute cursor-move"
      style={{
        left: `${position.x}px`,
        top: `${position.y}px`,
        backgroundColor: color,
      }}
      onMouseDown={handleMouseDown}
    >
      <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
        <CardTitle className="text-sm font-medium">{title}</CardTitle>
        <div className="flex space-x-2">
          <Button size="icon" variant="ghost" onClick={() => onConnect(id)}>
            <Link className="h-4 w-4" />
          </Button>
          <Button size="icon" variant="ghost" onClick={() => onEdit(id)}>
            <Pencil className="h-4 w-4" />
          </Button>
          <Button size="icon" variant="ghost" onClick={() => onDelete(id)}>
            <Trash className="h-4 w-4" />
          </Button>
          <Button size="icon" variant="ghost" onClick={handleAddTag}>
            <Tag className="h-4 w-4" />
          </Button>
        </div>
      </CardHeader>
      <CardContent>
        <p className="text-xs text-muted-foreground">{content.substring(0, 100)}...</p>
        <div className="mt-2 flex flex-wrap gap-1">
          {tags && tags.map((tag, index) => (
            <Badge key={index} variant="secondary">{tag}</Badge>
          ))}
        </div>
      </CardContent>
    </Card>
  )
}

================
File: components/scenes/scene-canvas.tsx
================
'use client';

import React, { useState, useEffect } from 'react'
import { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd'
import { SceneBlock } from './scene-block'
import { SceneConnection } from './scene-connection'
import { Button } from "@/components/ui/button"
import { Plus } from 'lucide-react'
import { SceneEditor } from './scene-editor'
import { Scene } from '@/lib/types'

interface SceneCanvasProps {
  projectId: string | null
}

export function SceneCanvas({ projectId }: SceneCanvasProps) {
  const [scenes, setScenes] = useState<Scene[]>([])
  const [editingScene, setEditingScene] = useState<Scene | null>(null)

  useEffect(() => {
    // Load scenes for the current project
    // This is where you'd typically fetch data from an API
    if (projectId) {
      // Simulating API call
      const mockScenes: Scene[] = [
        { 
          id: '1', 
          title: 'Opening Scene', 
          content: 'Fade in...', 
          position: { x: 100, y: 100 }, 
          connections: [], 
          order: 1, 
          color: '#FFB3BA',
          type: 'scene',
          characters: [],
          storyPhase: 'Act 1: Setup'
        },
        { 
          id: '2', 
          title: 'Climax', 
          content: 'The hero faces the villain...', 
          position: { x: 400, y: 300 }, 
          connections: [], 
          order: 2, 
          color: '#BAFFC9',
          type: 'scene',
          characters: [],
          storyPhase: 'Act 2: Confrontation'
        },
      ]
      setScenes(mockScenes)
    }
  }, [projectId])

  const handleDragEnd = (result: DropResult) => {
    if (!result.destination) return

    const newScenes = Array.from(scenes)
    const [reorderedScene] = newScenes.splice(result.source.index, 1)
    newScenes.splice(result.destination.index, 0, reorderedScene)

    // Update scene orders
    const updatedScenes = newScenes.map((scene, index) => ({
      ...scene,
      order: index + 1
    }))

    setScenes(updatedScenes)
    // Here you would also update the scene order in your backend
  }

  const handleAddScene = () => {
    const newScene: Scene = {
      id: `scene-${Date.now()}`,
      title: `New Scene`,
      content: '',
      position: { x: Math.random() * 500, y: Math.random() * 500 },
      connections: [],
      order: scenes.length + 1,
      color: `#${Math.floor(Math.random()*16777215).toString(16)}`, // Random color
      type: 'scene',
      characters: [],
      storyPhase: 'Unassigned'
    }
    setScenes([...scenes, newScene])
  }

  const handleMoveScene = (id: string, newPosition: { x: number; y: number }) => {
    setScenes(scenes.map(scene => 
      scene.id === id ? { ...scene, position: newPosition } : scene
    ))
  }

  const handleEditScene = (id: string) => {
    const scene = scenes.find(s => s.id === id)
    if (scene) {
      setEditingScene(scene)
    }
  }

  const handleSaveScene = (updatedScene: Scene) => {
    setScenes(scenes.map(scene => 
      scene.id === updatedScene.id ? updatedScene : scene
    ))
    setEditingScene(null)
  }

  const handleDeleteScene = (id: string) => {
    setScenes(scenes.filter(scene => scene.id !== id))
  }

  const handleAddTag = (id: string, tag: string) => {
    setScenes(scenes.map(scene => 
      scene.id === id ? { ...scene, tags: [...(scene.tags || []), tag] } : scene
    ))
  }
  
  const handleConnectScene = (id: string) => {
    // Implement connection logic here
  }

  return (
    <DragDropContext onDragEnd={handleDragEnd}>
      <Droppable droppableId="scenes">
        {(provided) => (
          <div 
            {...provided.droppableProps}
            ref={provided.innerRef}
            className="relative w-full h-[600px] border border-gray-200 rounded-lg overflow-hidden bg-gray-50"
          >
            {scenes.map((scene, index) => (
              <Draggable key={scene.id} draggableId={scene.id} index={index}>
                {(provided) => (
                  <div
                    ref={provided.innerRef}
                    {...provided.draggableProps}
                    {...provided.dragHandleProps}
                  >
                    <SceneBlock
                      {...scene}
                      onMove={handleMoveScene}
                      onEdit={handleEditScene}
                      onConnect={handleConnectScene}
                      onDelete={handleDeleteScene}
                      onAddTag={handleAddTag}
                    />
                    {scene.connections.map(connectedId => {
                      const connectedScene = scenes.find(s => s.id === connectedId)
                      if (connectedScene) {
                        return <SceneConnection key={`${scene.id}-${connectedId}`} scene1={scene} scene2={connectedScene} />
                      }
                      return null
                    })}
                  </div>
                )}
              </Draggable>
            ))}
            {provided.placeholder}
            <Button
              className="absolute bottom-4 right-4"
              onClick={handleAddScene}
            >
              <Plus className="mr-2 h-4 w-4" /> Add Scene
            </Button>
          </div>
        )}
      </Droppable>
      {editingScene && (
        <SceneEditor
          scene={editingScene}
          onSave={handleSaveScene}
          onClose={() => setEditingScene(null)}
        />
      )}
    </DragDropContext>
  )
}

================
File: components/scenes/scene-connection.tsx
================
import React from 'react'
import { Scene } from '@/lib/types'

interface SceneConnectionProps {
  scene1: Scene
  scene2: Scene
}

export function SceneConnection({ scene1, scene2 }: SceneConnectionProps) {
  const startX = scene1.position.x + 128 // Assuming scene block width is 256px
  const startY = scene1.position.y + 80 // Assuming scene block height is 160px
  const endX = scene2.position.x + 128
  const endY = scene2.position.y + 80

  const pathD = `M${startX},${startY} C${(startX + endX) / 2},${startY} ${(startX + endX) / 2},${endY} ${endX},${endY}`

  return (
    <svg className="absolute top-0 left-0 w-full h-full pointer-events-none">
      <path
        d={pathD}
        fill="none"
        stroke="rgba(59, 130, 246, 0.5)"
        strokeWidth="2"
      />
    </svg>
  )
}

================
File: components/scenes/scene-editor.tsx
================
import React, { useState, useEffect } from 'react'
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Scene, Character, Location } from '@/lib/types'
import { formatScreenplayContent, estimatePageCount, autoCompleteCharacter, autoCompleteLocation } from '@/lib/utils'
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"

interface SceneEditorProps {
  scene: Scene
  onSave: (updatedScene: Scene) => void
  onClose: () => void
  characters: Character[]
  locations: Location[]
}

export function SceneEditor({ scene, onSave, onClose, characters, locations }: SceneEditorProps) {
  const [title, setTitle] = useState(scene.title)
  const [content, setContent] = useState(scene.content)
  const [formattedContent, setFormattedContent] = useState('')
  const [pageCount, setPageCount] = useState(0)
  const [lineCount, setLineCount] = useState(0)
  const [sceneType, setSceneType] = useState(scene.type || 'scene')

  useEffect(() => {
    const formatted = formatScreenplayContent(content)
    setFormattedContent(formatted)
    setPageCount(estimatePageCount([{ ...scene, content }]))
    setLineCount(content.split('\n').length)
  }, [content])

  const handleContentChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    const newContent = e.target.value
    setContent(newContent)
    
    // Auto-formatting
    const lines = newContent.split('\n')
    const formattedLines = lines.map(line => {
      if (line.trim().toUpperCase() === line.trim()) {
        return line.trim() // Character names
      } else if (line.trim().startsWith('(') && line.trim().endsWith(')')) {
        return `  ${line.trim()}` // Parentheticals
      } else if (line.trim().startsWith('INT.') || line.trim().startsWith('EXT.')) {
        return line.trim().toUpperCase() // Scene headings
      } else if (['FADE IN:', 'FADE OUT.', 'CUT TO:'].includes(line.trim().toUpperCase())) {
        return `\n${line.trim().toUpperCase()}\n` // Transitions
      } else {
        return `    ${line.trim()}` // Action and dialogue
      }
    })
    setContent(formattedLines.join('\n'))
  }

  const handleCharacterAutocomplete = (input: string) => {
    return autoCompleteCharacter(input, characters.map(c => c.name))
  }

  const handleLocationAutocomplete = (input: string) => {
    return autoCompleteLocation(input, locations.map(l => l.name))
  }

  const handleSave = () => {
    onSave({ ...scene, title, content, type: sceneType })
  }

  return (
    <Dialog open={true} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-[800px]">
        <DialogHeader>
          <DialogTitle>Edit Scene: {scene.title}</DialogTitle>
        </DialogHeader>
        <div className="grid gap-4 py-4">
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="title" className="text-right">Scene Title</Label>
            <Input
              id="title"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              className="col-span-3"
            />
          </div>
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="sceneType" className="text-right">Scene Type</Label>
            <Select value={sceneType} onValueChange={setSceneType}>
              <SelectTrigger className="col-span-3">
                <SelectValue placeholder="Select scene type" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="scene">Scene</SelectItem>
                <SelectItem value="transition">Transition</SelectItem>
                <SelectItem value="montage">Montage</SelectItem>
                <SelectItem value="intercut">Intercut</SelectItem>
              </SelectContent>
            </Select>
          </div>
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="content" className="text-right">Scene Content</Label>
            <Textarea
              id="content"
              value={content}
              onChange={handleContentChange}
              className="col-span-3 font-mono"
              rows={20}
              style={{
                lineHeight: '1.5',
                padding: '1rem',
                whiteSpace: 'pre-wrap',
              }}
            />
          </div>
          <div className="grid grid-cols-4 items-center gap-4">
            <Label className="text-right">Preview</Label>
            <div className="col-span-3 font-mono whitespace-pre-wrap border p-4">
              {formattedContent}
            </div>
          </div>
          <div className="grid grid-cols-4 items-center gap-4">
            <Label className="text-right">Statistics</Label>
            <div className="col-span-3">
              <p>Page Count: {pageCount}</p>
              <p>Line Count: {lineCount}</p>
            </div>
          </div>
        </div>
        <DialogFooter>
          <Button type="submit" onClick={handleSave}>Save changes</Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}

================
File: components/scenes/SceneGoalsConflict.tsx
================
import React, { useState } from 'react'
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Plus, Minus } from 'lucide-react'

interface GoalConflict {
  id: string
  type: 'goal' | 'conflict'
  content: string
}

interface SceneGoalsConflictsProps {
  initialGoalsConflicts: GoalConflict[]
  onUpdate: (goalsConflicts: GoalConflict[]) => void
}

export function SceneGoalsConflicts({ initialGoalsConflicts, onUpdate }: SceneGoalsConflictsProps) {
  const [goalsConflicts, setGoalsConflicts] = useState<GoalConflict[]>(initialGoalsConflicts)

  const handleAdd = (type: 'goal' | 'conflict') => {
    const newItem: GoalConflict = {
      id: Date.now().toString(),
      type,
      content: ''
    }
    const updatedGoalsConflicts = [...goalsConflicts, newItem]
    setGoalsConflicts(updatedGoalsConflicts)
    onUpdate(updatedGoalsConflicts)
  }

  const handleRemove = (id: string) => {
    const updatedGoalsConflicts = goalsConflicts.filter(item => item.id !== id)
    setGoalsConflicts(updatedGoalsConflicts)
    onUpdate(updatedGoalsConflicts)
  }

  const handleChange = (id: string, content: string) => {
    const updatedGoalsConflicts = goalsConflicts.map(item =>
      item.id === id ? { ...item, content } : item
    )
    setGoalsConflicts(updatedGoalsConflicts)
    onUpdate(updatedGoalsConflicts)
  }

  return (
    <div className="space-y-4">
      <div>
        <h3 className="text-lg font-semibold mb-2">Scene Goals</h3>
        {goalsConflicts.filter(item => item.type === 'goal').map((goal) => (
          <div key={goal.id} className="flex items-center space-x-2 mb-2">
            <Textarea
              value={goal.content}
              onChange={(e) => handleChange(goal.id, e.target.value)}
              placeholder="Enter scene goal..."
              className="flex-grow"
            />
            <Button size="icon" variant="ghost" onClick={() => handleRemove(goal.id)}>
              <Minus className="h-4 w-4" />
            </Button>
          </div>
        ))}
        <Button onClick={() => handleAdd('goal')}>
          <Plus className="mr-2 h-4 w-4" /> Add Goal
        </Button>
      </div>
      <div>
        <h3 className="text-lg font-semibold mb-2">Scene Conflicts</h3>
        {goalsConflicts.filter(item => item.type === 'conflict').map((conflict) => (
          <div key={conflict.id} className="flex items-center space-x-2 mb-2">
            <Textarea
              value={conflict.content}
              onChange={(e) => handleChange(conflict.id, e.target.value)}
              placeholder="Enter scene conflict..."
              className="flex-grow"
            />
            <Button size="icon" variant="ghost" onClick={() => handleRemove(conflict.id)}>
              <Minus className="h-4 w-4" />
            </Button>
          </div>
        ))}
        <Button onClick={() => handleAdd('conflict')}>
          <Plus className="mr-2 h-4 w-4" /> Add Conflict
        </Button>
      </div>
    </div>
  )
}

================
File: components/scenes/SceneHistory.tsx
================
import React, { useState, useEffect } from 'react'
import { Button } from "@/components/ui/button"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Scene } from '@/lib/types'

interface SceneVersion extends Scene {
  version: number
  timestamp: Date
}

interface SceneHistoryProps {
  sceneId: string
  onRevertToVersion: (version: SceneVersion) => void
}

export function SceneHistory({ sceneId, onRevertToVersion }: SceneHistoryProps) {
  const [versions, setVersions] = useState<SceneVersion[]>([])

  useEffect(() => {
    // Fetch scene versions from API
    // This is where you'd make an API call to get the scene history
  }, [sceneId])

  return (
    <div className="space-y-4">
      <h3 className="text-lg font-semibold">Scene History</h3>
      <ScrollArea className="h-[300px] w-full rounded-md border">
        {versions.map((version) => (
          <div
            key={version.version}
            className="p-2 hover:bg-gray-100 cursor-pointer"
            onClick={() => onRevertToVersion(version)}
          >
            <p className="font-medium">Version {version.version}</p>
            <p className="text-sm text-gray-500">{version.timestamp.toLocaleString()}</p>
          </div>
        ))}
      </ScrollArea>
    </div>
  )
}

================
File: components/scenes/SceneNotes.tsx
================
import React, { useState } from 'react'
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Textarea } from "@/components/ui/textarea"

interface Note {
  id: string
  content: string
  timestamp: Date
}

interface SceneNotesProps {
  sceneId: string
  initialNotes: Note[]
  onAddNote: (sceneId: string, note: Note) => void
}

export function SceneNotes({ sceneId, initialNotes, onAddNote }: SceneNotesProps) {
  const [notes, setNotes] = useState<Note[]>(initialNotes)
  const [newNote, setNewNote] = useState('')

  const handleAddNote = () => {
    if (newNote.trim()) {
      const note: Note = {
        id: Date.now().toString(),
        content: newNote,
        timestamp: new Date()
      }
      setNotes([...notes, note])
      onAddNote(sceneId, note)
      setNewNote('')
    }
  }

  return (
    <div className="space-y-4">
      <h3 className="text-lg font-semibold">Scene Notes</h3>
      <ScrollArea className="h-[200px] w-full rounded-md border p-4">
        {notes.map((note) => (
          <div key={note.id} className="mb-4 p-2 bg-gray-100 rounded">
            <p className="text-sm">{note.content}</p>
            <p className="text-xs text-gray-500 mt-1">
              {note.timestamp.toLocaleString()}
            </p>
          </div>
        ))}
      </ScrollArea>
      <div className="flex space-x-2">
        <Textarea
          value={newNote}
          onChange={(e) => setNewNote(e.target.value)}
          placeholder="Add a new note..."
          className="flex-grow"
        />
        <Button onClick={handleAddNote}>Add Note</Button>
      </div>
    </div>
  )
}

================
File: components/scenes/SceneOutline.tsx
================
import React from 'react'
import { Scene } from '@/lib/types'
import { Button } from "@/components/ui/button"
import { ScrollArea } from "@/components/ui/scroll-area"
import { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd'

interface SceneOutlineProps {
  scenes: Scene[]
  onReorder: (reorderedScenes: Scene[]) => void
  onSceneSelect: (sceneId: string) => void
}

export function SceneOutline({ scenes, onReorder, onSceneSelect }: SceneOutlineProps) {
  const handleDragEnd = (result: DropResult) => {
    if (!result.destination) return

    const newScenes = Array.from(scenes)
    const [reorderedScene] = newScenes.splice(result.source.index, 1)
    newScenes.splice(result.destination.index, 0, reorderedScene)

    onReorder(newScenes)
  }

  return (
    <DragDropContext onDragEnd={handleDragEnd}>
      <Droppable droppableId="scene-outline">
        {(provided) => (
          <ScrollArea className="h-[600px] w-full rounded-md border" {...provided.droppableProps} ref={provided.innerRef}>
            {scenes.map((scene, index) => (
              <Draggable key={scene.id} draggableId={scene.id} index={index}>
                {(provided) => (
                  <div
                    ref={provided.innerRef}
                    {...provided.draggableProps}
                    {...provided.dragHandleProps}
                    className="p-2 hover:bg-gray-100"
                  >
                    <Button
                      variant="ghost"
                      className="w-full justify-start"
                      onClick={() => onSceneSelect(scene.id)}
                    >
                      {scene.title}
                    </Button>
                  </div>
                )}
              </Draggable>
            ))}
            {provided.placeholder}
          </ScrollArea>
        )}
      </Droppable>
    </DragDropContext>
  )
}

================
File: components/screenplay/full-screenplay-view.tsx
================
import React, { useState, useEffect } from 'react'
import { Scene } from '@/lib/types'
import { ScrollArea } from "@/components/ui/scroll-area"
import { formatScreenplayContent, estimatePageCount } from '@/lib/utils'
import { Button } from "@/components/ui/button"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"

interface FullScreenplayViewProps {
  scenes: Scene[]
}

export function FullScreenplayView({ scenes }: FullScreenplayViewProps) {
  const [formattedScreenplay, setFormattedScreenplay] = useState('')
  const [pageCount, setPageCount] = useState(0)
  const [exportFormat, setExportFormat] = useState('pdf')

  useEffect(() => {
    if (scenes && scenes.length > 0) {
      const sortedScenes = [...scenes].sort((a, b) => a.order - b.order)
      const fullScreenplay = sortedScenes
        .map(scene => {
          let sceneContent = ''
          if (scene.type === 'transition') {
            sceneContent = scene.content.toUpperCase()
          } else {
            sceneContent = `${scene.title.toUpperCase()}\n\n${formatScreenplayContent(scene.content)}`
          }
          return sceneContent
        })
        .join('\n\n')
      setFormattedScreenplay(fullScreenplay)
      setPageCount(estimatePageCount(sortedScenes))
    } else {
      setFormattedScreenplay('No scenes available.')
      setPageCount(0)
    }
  }, [scenes])

  const handleExport = () => {
    // Implement export functionality based on the selected format
    console.log(`Exporting screenplay as ${exportFormat}`)
    // You would typically call an API endpoint or use a library to generate the export file
  }

  return (
    <div className="space-y-4">
      <div className="flex justify-between items-center">
        <h2 className="text-2xl font-bold">Full Screenplay</h2>
        <div className="flex items-center space-x-2">
          <Select value={exportFormat} onValueChange={setExportFormat}>
            <SelectTrigger className="w-[180px]">
              <SelectValue placeholder="Select export format" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="pdf">PDF</SelectItem>
              <SelectItem value="finaldraft">Final Draft</SelectItem>
              <SelectItem value="fountain">Fountain</SelectItem>
            </SelectContent>
          </Select>
          <Button onClick={handleExport}>Export</Button>
        </div>
      </div>
      <div className="flex justify-between items-center">
        <p>Estimated Page Count: {pageCount}</p>
        <p>Scene Count: {scenes.length}</p>
      </div>
      <ScrollArea className="h-[600px] w-full rounded-md border p-4">
        <pre className="font-mono text-sm whitespace-pre-wrap">{formattedScreenplay}</pre>
      </ScrollArea>
    </div>
  )
}

================
File: components/screenplay/ScreenplaySettings.tsx
================
import React, { useState } from 'react'
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"

interface ScreenplaySettings {
  leftMargin: number
  rightMargin: number
  topMargin: number
  bottomMargin: number
  fontFamily: string
  fontSize: number
}

interface ScreenplaySettingsProps {
  settings: ScreenplaySettings
  onSave: (settings: ScreenplaySettings) => void
  onClose: () => void
}

export function ScreenplaySettings({ settings, onSave, onClose }: ScreenplaySettingsProps) {
  const [localSettings, setLocalSettings] = useState(settings)

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target
    setLocalSettings(prev => ({ ...prev, [name]: value }))
  }

  const handleSave = () => {
    onSave(localSettings)
    onClose()
  }

  return (
    <Dialog open={true} onOpenChange={onClose}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Screenplay Settings</DialogTitle>
        </DialogHeader>
        <div className="grid gap-4 py-4">
          <div className="grid grid-cols-2 items-center gap-4">
            <Label htmlFor="leftMargin">Left Margin (inches)</Label>
            <Input
              id="leftMargin"
              name="leftMargin"
              type="number"
              value={localSettings.leftMargin}
              onChange={handleChange}
            />
          </div>
          <div className="grid grid-cols-2 items-center gap-4">
            <Label htmlFor="rightMargin">Right Margin (inches)</Label>
            <Input
              id="rightMargin"
              name="rightMargin"
              type="number"
              value={localSettings.rightMargin}
              onChange={handleChange}
            />
          </div>
          <div className="grid grid-cols-2 items-center gap-4">
            <Label htmlFor="topMargin">Top Margin (inches)</Label>
            <Input
              id="topMargin"
              name="topMargin"
              type="number"
              value={localSettings.topMargin}
              onChange={handleChange}
            />
          </div>
          <div className="grid grid-cols-2 items-center gap-4">
            <Label htmlFor="bottomMargin">Bottom Margin (inches)</Label>
            <Input
              id="bottomMargin"
              name="bottomMargin"
              type="number"
              value={localSettings.bottomMargin}
              onChange={handleChange}
            />
          </div>
          <div className="grid grid-cols-2 items-center gap-4">
            <Label htmlFor="fontFamily">Font Family</Label>
            <Input
              id="fontFamily"
              name="fontFamily"
              value={localSettings.fontFamily}
              onChange={handleChange}
            />
          </div>
          <div className="grid grid-cols-2 items-center gap-4">
            <Label htmlFor="fontSize">Font Size (pt)</Label>
            <Input
              id="fontSize"
              name="fontSize"
              type="number"
              value={localSettings.fontSize}
              onChange={handleChange}
            />
          </div>
        </div>
        <DialogFooter>
          <Button onClick={handleSave}>Save Settings</Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}

================
File: components/screenplay/ScriptExport.tsx
================
import React, { useState } from 'react'
import { Button } from "@/components/ui/button"
import { Select } from "@/components/ui/select"
import { Scene } from '@/lib/types'
import { formatScreenplayContent } from '@/lib/utils'

interface ScriptExportProps {
  scenes: Scene[]
}

export function ScriptExport({ scenes }: ScriptExportProps) {
  const [exportFormat, setExportFormat] = useState('pdf')

  const handleExport = async () => {
    const formattedContent = scenes
      .sort((a, b) => a.order - b.order)
      .map(scene => formatScreenplayContent(scene.content))
      .join('\n\n')

    // In a real application, you would send this to your backend for processing
    // and file generation. Here's a simulation of that process:
    console.log(`Exporting screenplay in ${exportFormat} format`)
    console.log(formattedContent)

    // Simulating a file download
    const blob = new Blob([formattedContent], { type: 'text/plain' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `screenplay.${exportFormat}`
    a.click()
    URL.revokeObjectURL(url)
  }

  return (
    <div className="space-y-4">
      <h3 className="text-lg font-semibold">Export Screenplay</h3>
      <div className="flex space-x-2">
        <Select
          value={exportFormat}
          onValueChange={setExportFormat}
        >
          <option value="pdf">PDF</option>
          <option value="fdx">Final Draft (FDX)</option>
          <option value="fountain">Fountain</option>
        </Select>
        <Button onClick={handleExport}>Export</Button>
      </div>
    </div>
  )
}

================
File: components/story/StoryStructure.tsx
================
import React, { useState } from 'react'
import { Scene } from '@/lib/types'
import { Button } from "@/components/ui/button"
import { Select } from "@/components/ui/select"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"

interface StoryStructureProps {
  scenes: Scene[]
  onUpdateScenes: (updatedScenes: Scene[]) => void
}

const threeActStructure = [
  { name: 'Act 1: Setup', percentage: 25 },
  { name: 'Act 2: Confrontation', percentage: 50 },
  { name: 'Act 3: Resolution', percentage: 25 },
]

const heroJourney = [
  { name: 'Ordinary World', percentage: 10 },
  { name: 'Call to Adventure', percentage: 5 },
  { name: 'Refusal of the Call', percentage: 5 },
  { name: 'Meeting the Mentor', percentage: 5 },
  { name: 'Crossing the Threshold', percentage: 10 },
  { name: 'Tests, Allies, Enemies', percentage: 20 },
  { name: 'Approach to the Inmost Cave', percentage: 10 },
  { name: 'Ordeal', percentage: 10 },
  { name: 'Reward', percentage: 5 },
  { name: 'The Road Back', percentage: 10 },
  { name: 'Resurrection', percentage: 5 },
  { name: 'Return with the Elixir', percentage: 5 },
]

export function StoryStructure({ scenes, onUpdateScenes }: StoryStructureProps) {
  const [selectedStructure, setSelectedStructure] = useState('threeAct')

  const applyStructure = () => {
    const structure = selectedStructure === 'threeAct' ? threeActStructure : heroJourney
    const totalScenes = scenes.length
    let sceneIndex = 0

    const updatedScenes = structure.flatMap(phase => {
      const phaseSceneCount = Math.round((phase.percentage / 100) * totalScenes)
      const phaseScenes = scenes.slice(sceneIndex, sceneIndex + phaseSceneCount).map(scene => ({
        ...scene,
        storyPhase: phase.name
      }))
      sceneIndex += phaseSceneCount
      return phaseScenes
    })

    onUpdateScenes(updatedScenes)
  }

  return (
    <div className="space-y-4">
      <h3 className="text-lg font-semibold">Story Structure</h3>
      <div className="flex space-x-2">
        <Select
          value={selectedStructure}
          onValueChange={setSelectedStructure}
        >
          <option value="threeAct">Three-Act Structure</option>
          <option value="heroJourney">Hero's Journey</option>
        </Select>
        <Button onClick={applyStructure}>Apply Structure</Button>
      </div>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {(selectedStructure === 'threeAct' ? threeActStructure : heroJourney).map((phase, index) => (
          <Card key={index}>
            <CardHeader>
              <CardTitle>{phase.name}</CardTitle>
            </CardHeader>
            <CardContent>
              <p>{phase.percentage}% of the story</p>
              <p>{scenes.filter(scene => scene.storyPhase === phase.name).length} scenes</p>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  )
}

================
File: components/timeline/StoryTimeline.tsx
================
import React from 'react'
import { Scene } from '@/lib/types'
import { ScrollArea } from "@/components/ui/scroll-area"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"

interface StoryTimelineProps {
  scenes: Scene[]
}

export function StoryTimeline({ scenes }: StoryTimelineProps) {
  const sortedScenes = scenes.sort((a, b) => a.order - b.order)

  return (
    <div className="space-y-4">
      <h3 className="text-lg font-semibold">Story Timeline</h3>
      <ScrollArea className="h-[400px]">
        <div className="relative">
          <div className="absolute left-4 top-0 bottom-0 w-0.5 bg-gray-200"></div>
          {sortedScenes.map((scene, index) => (
            <div key={scene.id} className="relative pl-8 pb-8">
              <div className="absolute left-2 w-4 h-4 bg-blue-500 rounded-full mt-1.5 -ml-2"></div>
              <Card>
                <CardHeader>
                  <CardTitle>{scene.title}</CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-sm text-gray-500">{scene.content.substring(0, 100)}...</p>
                </CardContent>
              </Card>
            </div>
          ))}
        </div>
      </ScrollArea>
    </div>
  )
}

================
File: components/ui/badge.tsx
================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }

================
File: components/ui/button.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

================
File: components/ui/card.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

================
File: components/ui/dialog.tsx
================
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

================
File: components/ui/dropdown-menu.tsx
================
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}

================
File: components/ui/input.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

================
File: components/ui/label.tsx
================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

================
File: components/ui/progress.tsx
================
"use client";

import * as React from "react";
import * as ProgressPrimitive from "@radix-ui/react-progress";

import { cn } from "@/lib/utils";

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root> & { value: number }
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
));

Progress.displayName = ProgressPrimitive.Root.displayName;

export { Progress };

================
File: components/ui/scroll-area.tsx
================
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }

================
File: components/ui/select.tsx
================
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-transparent px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
      className
    )}
    {...props}
  >
    {children}
    <ChevronDown className="h-4 w-4 opacity-50" />
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md animate-in fade-in-80",
        position === "popper" && "translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
}

================
File: components/ui/separator.tsx
================
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }

================
File: components/ui/table.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn("bg-primary font-medium text-primary-foreground", className)}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}

================
File: components/ui/tabs.tsx
================
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }

================
File: components/ui/textarea.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }

================
File: components/ui/toast.tsx
================
"use client"

import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}

================
File: components/ui/toaster.tsx
================
"use client"

import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"
import { useToast } from "@/components/ui/use-toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}

================
File: components/ui/use-toast.ts
================
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

================
File: components/sidebar.tsx
================
'use client'

import React from 'react'
import Link from 'next/link'
import { usePathname, useRouter } from 'next/navigation'
import { Button } from "@/components/ui/button"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Separator } from "@/components/ui/separator"
import { 
  Home,
  Book, 
  Users, 
  Settings, 
  PenTool, 
  Calendar,
  ChevronDown
} from 'lucide-react'
import { useProject } from '@/lib/contexts/ProjectContext'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { Project } from '@/lib/contexts/ProjectContext'

export function Sidebar() {
  const pathname = usePathname()
  const router = useRouter()
  const { currentProject, setCurrentProject } = useProject()

  const isActive = (path: string) => pathname === path

  // This would typically come from an API or context
  const projects: Project[] = [
    { id: '1', title: 'Project 1', description: 'Description for Project 1' },
    { id: '2', title: 'Project 2', description: 'Description for Project 2' },
    { id: '3', title: 'Project 3', description: 'Description for Project 3' },
  ]

  const handleProjectSelect = (project: Project) => {
    setCurrentProject(project)
    router.push(`/project/${project.id}`)
  }

  return (
    <div className="w-64 bg-white border-r h-screen">
      <div className="p-6">
        <h2 className="text-2xl font-bold mb-6">Screenplay App</h2>
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="outline" className="w-full justify-between mb-4">
              {currentProject ? currentProject.title : "Select a project"}
              <ChevronDown className="ml-2 h-4 w-4" />
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent className="w-56">
            {projects.map((project) => (
              <DropdownMenuItem 
                key={project.id}
                onClick={() => handleProjectSelect(project)}
              >
                {project.title}
              </DropdownMenuItem>
            ))}
          </DropdownMenuContent>
        </DropdownMenu>
        <ScrollArea className="h-[calc(100vh-8rem)]">
          <div className="space-y-4">
            <Link href="/" passHref>
              <Button variant={isActive('/') ? 'secondary' : 'ghost'} className="w-full justify-start">
                <Home className="mr-2 h-4 w-4" />
                Home
              </Button>
            </Link>
            {currentProject && (
              <>
                <Link href={`/project/${currentProject.id}`} passHref>
                  <Button variant={isActive(`/project/${currentProject.id}`) ? 'secondary' : 'ghost'} className="w-full justify-start">
                    <Home className="mr-2 h-4 w-4" />
                    Project Home
                  </Button>
                </Link>
                <Link href={`/project/${currentProject.id}/scenes`} passHref>
                  <Button variant={isActive(`/project/${currentProject.id}/scenes`) ? 'secondary' : 'ghost'} className="w-full justify-start">
                    <PenTool className="mr-2 h-4 w-4" />
                    Scenes
                  </Button>
                </Link>
                <Link href={`/project/${currentProject.id}/characters`} passHref>
                  <Button variant={isActive(`/project/${currentProject.id}/characters`) ? 'secondary' : 'ghost'} className="w-full justify-start">
                    <Users className="mr-2 h-4 w-4" />
                    Characters
                  </Button>
                </Link>
                <Link href={`/project/${currentProject.id}/script`} passHref>
                  <Button variant={isActive(`/project/${currentProject.id}/script`) ? 'secondary' : 'ghost'} className="w-full justify-start">
                    <Book className="mr-2 h-4 w-4" />
                    Script
                  </Button>
                </Link>
                <Link href={`/project/${currentProject.id}/timeline`} passHref>
                  <Button variant={isActive(`/project/${currentProject.id}/timeline`) ? 'secondary' : 'ghost'} className="w-full justify-start">
                    <Calendar className="mr-2 h-4 w-4" />
                    Timeline
                  </Button>
                </Link>
              </>
            )}
            <Separator />
            <Link href="/settings" passHref>
              <Button variant={isActive('/settings') ? 'secondary' : 'ghost'} className="w-full justify-start">
                <Settings className="mr-2 h-4 w-4" />
                Settings
              </Button>
            </Link>
          </div>
        </ScrollArea>
      </div>
    </div>
  )
}

================
File: components/WithProjectProtection.tsx
================
'use client'

import { useProject } from '@/lib/contexts/ProjectContext'
import { useRouter } from 'next/navigation'
import { useEffect } from 'react'

export function WithProjectProtection<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  return function WithProjectProtectionWrapper(props: P) {
    const { currentProject } = useProject()
    const router = useRouter()

    useEffect(() => {
      if (!currentProject) {
        router.push('/')
      }
    }, [currentProject, router])

    if (!currentProject) {
      return null // or a loading spinner
    }

    return <WrappedComponent {...props} />
  }
}

================
File: lib/contexts/ProjectContext.tsx
================
'use client'

import React, { createContext, useContext, useState, ReactNode } from 'react'

export interface Project {
  id: string
  title: string
  description: string
}

interface ProjectContextType {
  currentProject: Project | null
  setCurrentProject: (project: Project | null) => void
}

const ProjectContext = createContext<ProjectContextType | undefined>(undefined)

export function ProjectProvider({ children }: { children: ReactNode }) {
  const [currentProject, setCurrentProject] = useState<Project | null>(null)

  return (
    <ProjectContext.Provider value={{ currentProject, setCurrentProject }}>
      {children}
    </ProjectContext.Provider>
  )
}

export function useProject() {
  const context = useContext(ProjectContext)
  if (context === undefined) {
    throw new Error('useProject must be used within a ProjectProvider')
  }
  return context
}

================
File: lib/hooks/useRealtimeCollaboration.ts
================
import { useEffect, useState } from 'react'
import io, { Socket } from 'socket.io-client'
import { Scene } from '@/lib/types'

export function useRealtimeCollaboration(sceneId: string) {
  const [socket, setSocket] = useState<Socket | null>(null)
  const [collaborators, setCollaborators] = useState<string[]>([])

  useEffect(() => {
    const newSocket = io('http://your-backend-url', {
      query: { sceneId }
    })

    setSocket(newSocket)

    newSocket.on('collaborators_update', (updatedCollaborators: string[]) => {
      setCollaborators(updatedCollaborators)
    })

    return () => {
      newSocket.disconnect()
    }
  }, [sceneId])

  const updateScene = (updatedScene: Partial<Scene>) => {
    if (socket) {
      socket.emit('scene_update', updatedScene)
    }
  }

  return { collaborators, updateScene }
}

================
File: lib/types.ts
================
import { type } from "os"

export interface Scene {
  storyPhase: string
  type: string
  id: string
  title: string
  content: string
  position: {
    x: number
    y: number
  }
  connections: string[]
  order: number
  color: string
  tags?: string[]
  characters: string[]
}

export interface Character {
  id: string
  name: string
  age: number
  occupation: string
  background: string
  personality: string
  goals: string
  conflicts: string
  arc: ArcPoint[]
  images: string[]
}

export interface Project {
  id: string
  title: string
  description: string
}

export interface ArcPoint {
  id: string
  sceneId: string
  description: string
  value: number
}

export interface Relationship {
  id: string
  character1Id: string
  character2Id: string
  type: string
  description: string
}

export interface Location {
  id: string
  name: string
  description: string
}

================
File: lib/utils.ts
================
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"
import { Scene } from "./types"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

export function formatScreenplayContent(content: string): string {
  const lines = content.split('\n')
  return lines.map(line => {
    if (line.trim().startsWith('INT.') || line.trim().startsWith('EXT.')) {
      return line.trim().toUpperCase()
    } else if (line.trim() === line.trim().toUpperCase() && line.trim().length > 0) {
      return `\n${line.trim()}\n` // Character names
    } else if (line.trim().startsWith('(') && line.trim().endsWith(')')) {
      return `  ${line.trim()}` // Parentheticals
    } else if (['FADE IN:', 'FADE OUT.', 'CUT TO:'].includes(line.trim().toUpperCase())) {
      return `\n${line.trim().toUpperCase()}\n` // Transitions
    } else {
      return `    ${line.trim()}` // Action and dialogue
    }
  }).join('\n')
}

export function estimatePageCount(scenes: Scene[]): number {
  const totalWords = scenes.reduce((count, scene) => count + scene.content.split(/\s+/).length, 0)
  return Math.ceil(totalWords / 250) // Assuming about 250 words per page
}

export function autoCompleteCharacter(input: string, characters: string[]): string[] {
  return characters.filter(char => char.toLowerCase().startsWith(input.toLowerCase()))
}

export function autoCompleteLocation(input: string, locations: string[]): string[] {
  return locations.filter(loc => loc.toLowerCase().startsWith(input.toLowerCase()))
}

================
File: package.json
================
{
  "name": "screenplay-app",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "@hookform/resolvers": "^3.9.0",
    "@radix-ui/react-alert-dialog": "^1.1.1",
    "@radix-ui/react-dialog": "^1.1.1",
    "@radix-ui/react-dropdown-menu": "^2.1.1",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-progress": "^1.1.0",
    "@radix-ui/react-scroll-area": "^1.1.0",
    "@radix-ui/react-select": "^2.1.1",
    "@radix-ui/react-separator": "^1.1.0",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-tabs": "^1.1.0",
    "@radix-ui/react-toast": "^1.2.1",
    "@types/node": "^22.5.0",
    "@types/react": "^18.3.4",
    "@types/react-beautiful-dnd": "^13.1.8",
    "@types/react-dom": "^18.3.0",
    "autoprefixer": "^10.4.20",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "framer-motion": "^10.18.0",
    "lucide-react": "^0.436.0",
    "next": "^14.2.6",
    "postcss": "^8.4.41",
    "react": "^18.3.1",
    "react-beautiful-dnd": "^13.1.1",
    "react-dnd": "^16.0.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.53.0",
    "react-progress": "^0.0.12",
    "react-progress-bar": "^0.1.0",
    "recharts": "^2.12.7",
    "socket.io-client": "^4.7.5",
    "tailwind-merge": "^2.5.2",
    "tailwindcss": "^3.4.10",
    "tailwindcss-animate": "^1.0.7",
    "typescript": "^5.5.4",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "@shadcn/ui": "^0.0.4",
    "eslint": "^8.57.0",
    "eslint-config-next": "^14.2.6"
  }
}

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
module.exports = {
  darkMode: ["class"],
  content: [
    './pages/**/*.{ts,tsx}',
    './components/**/*.{ts,tsx}',
    './app/**/*.{ts,tsx}',
    './src/**/*.{ts,tsx}',
  ],
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "#212121",
          foreground: "#ffffff",
        },
        secondary: {
          DEFAULT: "#3498db",
          foreground: "#ffffff",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "#e74c3c",
          foreground: "#ffffff",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: 0 },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: 0 },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
}
