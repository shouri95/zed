================================================================
Repopack Output File
================================================================

This file was generated by Repopack on: 2024-09-04T07:56:37.567Z

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Repository structure
3. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
  distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.



For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
app/
  (auth)/
    sign-in/
      page.tsx
    sign-up/
      page.tsx
    layout.tsx
  api/
    auth/
      [...nextauth].ts
  project-workspace/
    [id]/
      characters/
        page.tsx
      scenes/
        page.tsx
      script/
        page.tsx
      timeline/
        page.tsx
      page.tsx
  projects/
    page.tsx
  scenes/
    page.tsx
  workspace/
    page.tsx
  globals.css
  layout.tsx
  page.tsx
components/
  layout/
    ClientLayout.tsx
    DashNav.tsx
    Sidebar.tsx
    TopNavBar.tsx
    UserNav.tsx
  shared/
    ErrorBoundary.tsx
  ui/
    carousel/
      EmblaCarousel.tsx
      EmblaCarouselArrowButtons.tsx
      EmblaCarouselDotButton.tsx
    avatar.tsx
    badge.tsx
    button.tsx
    card.tsx
    dialog.tsx
    dropdown-menu.tsx
    form.tsx
    input.tsx
    label.tsx
    progress.tsx
    scroll-area.tsx
    select.tsx
    separator.tsx
    switch.tsx
    table.tsx
    tabs.tsx
    textarea.tsx
    toast.tsx
    toaster.tsx
    toggle.tsx
    toolbar.tsx
    use-toast.ts
features/
  auth/
    Authform.tsx
  project/
    CreateProject.tsx
    Dashboard.tsx
    ProjectStats.tsx
    Script.tsx
    WithProjectProtection.tsx
  scenes/
    scene-block.tsx
    scene-canvas.tsx
    scene-connection.tsx
    scene-editor.tsx
    SceneGoalsConflict.tsx
    SceneHistory.tsx
    SceneNotes.tsx
    SceneOutline.tsx
  script/
    ScriptEditor.tsx
  story/
    StoryStructure.tsx
  workspace/
    Overview.tsx
    TaskItem.tsx
    TaskList.tsx
    VisualizationCharts.tsx
styles/
  custom.css
  embla.css
package.json
tailwind.config.js

================================================================
Repository Files
================================================================

================
File: app/(auth)/sign-in/page.tsx
================
// app/(auth)/sign-in/page.tsx
import React from 'react';
import AuthForm from '@/features/auth/Authform';
import Link from 'next/link';
import { ArrowLeft } from 'lucide-react';

const SignInPage = () => {
  return (
    <div className="min-h-screen flex flex-col justify-center items-center bg-white text-gray-900">
      <Link href="/" className="absolute top-8 left-8 flex items-center text-gray-600 hover:text-gray-900">
        <ArrowLeft className="mr-2 h-4 w-4" />
        Back to Home
      </Link>
      <main className="w-full max-w-md px-4">
        <h1 className="text-4xl font-bold mb-2 text-center">Welcome Back</h1>
        <p className="text-center text-gray-600 mb-8">Sign in to continue your journey</p>
        <AuthForm type="sign-in" />
      </main>
      <footer className="absolute bottom-4 text-center text-gray-600">
        <p>&copy; 2024 Raay. All rights reserved.</p>
      </footer>
    </div>
  );
};

export default SignInPage;

================
File: app/(auth)/sign-up/page.tsx
================
// app/(auth)/sign-up/page.tsx
import React from 'react';
import AuthForm from '@/features/auth/Authform';
import Link from 'next/link';
import { ArrowLeft } from 'lucide-react';

const SignUpPage = () => {
  return (
    <div className="min-h-screen flex flex-col justify-center items-center bg-white text-gray-900">
      <Link href="/" className="absolute top-8 left-8 flex items-center text-gray-600 hover:text-gray-900">
        <ArrowLeft className="mr-2 h-4 w-4" />
        Back to Home
      </Link>
      <main className="w-full max-w-md px-4">
        <h1 className="text-4xl font-bold mb-2 text-center">Join Raay</h1>
        <p className="text-center text-gray-600 mb-8">Create an account to start your journey</p>
        <AuthForm type="sign-up" />
      </main>
      <footer className="absolute bottom-4 text-center text-gray-600">
        <p>&copy; 2024 Raay. All rights reserved.</p>
      </footer>
    </div>
  );
};

export default SignUpPage;

================
File: app/(auth)/layout.tsx
================
// app/(auth)/layout.tsx
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import { Toaster } from "@/components/ui/toaster";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Raay - Authentication",
  description: "Sign in or sign up to Raay",
};

export default function AuthLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <div className={`${inter.className} min-h-screen flex flex-col justify-center items-center bg-white`}>
      <main className="w-full max-w-md px-4">{children}</main>
      <Toaster />
    </div>
  );
}

================
File: app/api/auth/[...nextauth].ts
================
print false;

================
File: app/project-workspace/[id]/characters/page.tsx
================
'use client'

import React from 'react'
import { CharacterManagement } from '@/features/characters/character-management'
import { WithProjectProtection } from '@/features/project/WithProjectProtection'
import { useProject } from '@/lib/contexts/ProjectContext'
import { useParams } from 'next/navigation'

function CharactersPage() {
  const { id } = useParams()
  const { currentProject } = useProject()

  return (
    <div className="space-y-8">
      <h1 className="text-4xl font-bold">Character Management for {currentProject?.title}</h1>
      <CharacterManagement projectId={id as string} />
    </div>
  )
}

export default WithProjectProtection(CharactersPage)

================
File: app/project-workspace/[id]/scenes/page.tsx
================
'use client';

import React, { useState, useEffect } from 'react'
import { SceneCanvas } from '@/features/scenes/scene-canvas'
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { PlusCircle, Film, BookOpen } from 'lucide-react'
import { useParams } from 'next/navigation'
import { FullScreenplayView } from '@/features/screenplay/full-screenplay-view'
import { Scene } from '@/lib/types/types'
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { useProject } from '@/lib/contexts/ProjectContext'
import { useToast } from "@/components/ui/use-toast"
import { WithProjectProtection } from '@/features/project/WithProjectProtection'

function ScenesPage() {
  const { id } = useParams()
  const { currentProject } = useProject()
  const { toast } = useToast()
  const [scenes, setScenes] = useState<Scene[]>([])
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    if (currentProject) {
      // Fetch scenes for the current project
      // This is where you'd typically make an API call
      setLoading(true)
      // Simulating API call with setTimeout
      setTimeout(() => {
        setScenes([
          { id: '1', title: 'Opening Scene', content: 'FADE IN...', order: 1, position: { x: 0, y: 0 }, connections: [], color: '#FFB3BA', type: 'scene' },
          { id: '2', title: 'Climax', content: 'The hero faces the villain...', order: 2, position: { x: 0, y: 0 }, connections: [], color: '#BAFFC9', type: 'scene' },
        ])
        setLoading(false)
      }, 1000)
    } else {
      toast({
        title: "No project selected",
        description: "Please select a project to view scenes.",
        variant: "destructive",
      })
    }
  }, [currentProject, toast])

  const handleAddScene = () => {
    if (!currentProject) {
      toast({
        title: "Cannot add scene",
        description: "Please select a project first.",
        variant: "destructive",
      })
      return
    }

    const newScene: Scene = {
      id: `scene-${Date.now()}`,
      title: 'New Scene',
      content: '',
      order: scenes.length + 1,
      position: { x: Math.random() * 500, y: Math.random() * 500 },
      connections: [],
      color: `#${Math.floor(Math.random()*16777215).toString(16)}`,
      type: 'scene'
    }
    setScenes([...scenes, newScene])
  }

  if (loading) {
    return <div>Loading scenes...</div>
  }

  return (
    <div className="space-y-8">
      <div className="flex justify-between items-center">
        <h1 className="text-4xl font-bold">Scenes for {currentProject?.title}</h1>
        <Button onClick={handleAddScene}>
          <PlusCircle className="mr-2 h-4 w-4" /> New Scene
        </Button>
      </div>

      <Tabs defaultValue="canvas" className="w-full">
        <TabsList>
          <TabsTrigger value="canvas">Visual Canvas</TabsTrigger>
          <TabsTrigger value="list">Scene List</TabsTrigger>
          <TabsTrigger value="full">Full Screenplay</TabsTrigger>
        </TabsList>
        <TabsContent value="canvas">
          <Card>
            <CardHeader>
              <CardTitle>Scene Canvas</CardTitle>
              <CardDescription>Visualize and organize your screenplay scenes</CardDescription>
            </CardHeader>
            <CardContent>
              <SceneCanvas projectId={id as string} />
            </CardContent>
          </Card>
        </TabsContent>
        <TabsContent value="list">
          <Card>
            <CardHeader>
              <CardTitle>Scene List</CardTitle>
              <CardDescription>View and manage your scenes in a list format</CardDescription>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Order</TableHead>
                    <TableHead>Title</TableHead>
                    <TableHead>Content Preview</TableHead>
                    <TableHead>Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {scenes.map((scene) => (
                    <TableRow key={scene.id}>
                      <TableCell>{scene.order}</TableCell>
                      <TableCell>{scene.title}</TableCell>
                      <TableCell>{scene.content.substring(0, 50)}...</TableCell>
                      <TableCell>
                        <Button variant="ghost">Edit</Button>
                        <Button variant="ghost">Delete</Button>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        </TabsContent>
        <TabsContent value="full">
          <Card>
            <CardHeader>
              <CardTitle>Full Screenplay</CardTitle>
              <CardDescription>View your entire screenplay</CardDescription>
            </CardHeader>
            <CardContent>
              <FullScreenplayView scenes={scenes} />
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}

export default WithProjectProtection(ScenesPage)

================
File: app/project-workspace/[id]/script/page.tsx
================
'use client';

import React, { useState, useEffect, useCallback } from 'react';
import { useParams } from 'next/navigation';
import { useHotkeys } from 'react-hotkeys-hook';
import { useTheme } from 'next-themes';
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Toggle } from "@/components/ui/toggle";
import { Toolbar } from '@/components/ui/toolbar';
import { WithProjectProtection } from '@/features/project/WithProjectProtection';
import { useProject } from '@/lib/contexts/ProjectContext';
import { useToast } from "@/components/ui/use-toast";
import { Scene } from '@/lib/types/types';
import { Moon, Sun, Save, FileDown, Undo, Redo } from 'lucide-react';

const ScriptPage: React.FC = () => {
  const { id } = useParams();
  const { currentProject } = useProject();
  const { toast } = useToast();
  const { theme, setTheme } = useTheme();
  const [content, setContent] = useState('');
  const [scenes, setScenes] = useState<Scene[]>([]);
  const [wordCount, setWordCount] = useState(0);
  const [isFullscreen, setIsFullscreen] = useState(false);

  useEffect(() => {
    // Load saved content or set initial content
    const savedContent = localStorage.getItem(`scriptContent-${id}`);
    if (savedContent) {
      setContent(savedContent);
      updateWordCount(savedContent);
    }
  }, [id]);

  const handleContentChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    const newContent = e.target.value;
    setContent(newContent);
    localStorage.setItem(`scriptContent-${id}`, newContent);
    updateWordCount(newContent);
  };

  const updateWordCount = (text: string) => {
    const words = text.trim().split(/\s+/).filter(word => word !== '').length;
    setWordCount(words);
  };

  const toggleFullscreen = () => {
    if (!document.fullscreenElement) {
      document.documentElement.requestFullscreen();
      setIsFullscreen(true);
    } else {
      if (document.exitFullscreen) {
        document.exitFullscreen();
        setIsFullscreen(false);
      }
    }
  };

  const handleSave = () => {
    // Here you would typically make an API call to save the content
    toast({
      title: "Script saved",
      description: "Your script has been saved successfully.",
    });
  };

  const handleExport = () => {
    // Here you would implement the export functionality
    toast({
      title: "Export initiated",
      description: "Your script is being prepared for export.",
    });
  };

  // Hotkeys for quick formatting
  useHotkeys('ctrl+b', () => insertScreenplayElement('Scene Heading'));
  useHotkeys('ctrl+c', () => insertScreenplayElement('Character'));
  useHotkeys('ctrl+d', () => insertScreenplayElement('Dialogue'));
  useHotkeys('ctrl+a', () => insertScreenplayElement('Action'));
  useHotkeys('ctrl+t', () => insertScreenplayElement('Transition'));

  const insertScreenplayElement = useCallback((type: string) => {
    let newElement = '';
    switch (type) {
      case 'Scene Heading':
        newElement = '\nINT./EXT. LOCATION - DAY/NIGHT\n\n';
        break;
      case 'Character':
        newElement = '\nCHARACTER NAME\n\n';
        break;
      case 'Dialogue':
        newElement = '\nDialogue goes here...\n\n';
        break;
      case 'Action':
        newElement = '\nAction description...\n\n';
        break;
      case 'Transition':
        newElement = '\nCUT TO:\n\n';
        break;
      default:
        break;
    }
    setContent(prevContent => prevContent + newElement);
  }, []);

  return (
    <div className={`min-h-screen ${theme === 'dark' ? 'bg-gray-900 text-white' : 'bg-white text-gray-900'}`}>
      <Card className="m-4">
        <CardContent className="p-6">
          <div className="flex justify-between items-center mb-4">
            <h1 className="text-3xl font-bold">{currentProject?.title} - Script</h1>
            <div className="flex space-x-2">
              <Toggle
                aria-label="Toggle dark mode"
                pressed={theme === 'dark'}
                onPressedChange={() => setTheme(theme === 'dark' ? 'light' : 'dark')}
              >
                {theme === 'dark' ? <Sun className="h-5 w-5" /> : <Moon className="h-5 w-5" />}
              </Toggle>
              <Button onClick={handleSave}>
                <Save className="mr-2 h-4 w-4" /> Save
              </Button>
              <Button onClick={handleExport}>
                <FileDown className="mr-2 h-4 w-4" /> Export
              </Button>
              <Button onClick={toggleFullscreen}>
                {isFullscreen ? 'Exit Fullscreen' : 'Fullscreen'}
              </Button>
            </div>
          </div>
          <Tabs defaultValue="write">
            <TabsList>
              <TabsTrigger value="write">Write</TabsTrigger>
              <TabsTrigger value="outline">Outline</TabsTrigger>
              <TabsTrigger value="analyze">Analyze</TabsTrigger>
            </TabsList>
            <TabsContent value="write">
              <Toolbar />
              <ScrollArea className="h-[calc(100vh-300px)] w-full rounded-md border">
                <textarea
                  value={content}
                  onChange={handleContentChange}
                  className="w-full h-full resize-none border-none focus:outline-none focus:ring-0 text-lg leading-relaxed font-mono p-4"
                  placeholder="Start writing your screenplay..."
                  style={{
                    minHeight: 'calc(100vh - 300px)',
                  }}
                />
              </ScrollArea>
              <div className="mt-4 text-sm text-gray-500">
                Word count: {wordCount}
              </div>
            </TabsContent>
            <TabsContent value="outline">
              <div className="p-4">
                <h2 className="text-xl font-semibold mb-4">Scene Outline</h2>
                {/* Implement scene outline component here */}
              </div>
            </TabsContent>
            <TabsContent value="analyze">
              <div className="p-4">
                <h2 className="text-xl font-semibold mb-4">Script Analysis</h2>
                {/* Implement script analysis component here */}
              </div>
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>
    </div>
  );
};

export default WithProjectProtection(ScriptPage);

================
File: app/project-workspace/[id]/timeline/page.tsx
================
'use client'

import React from 'react'
import { WithProjectProtection } from '@/features/project/WithProjectProtection'
import { useProject } from '@/lib/contexts/ProjectContext'
import { useParams } from 'next/navigation'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"

function TimelinePage() {
  const { id } = useParams()
  const { currentProject } = useProject()

  return (
    <div className="space-y-8">
      <h1 className="text-4xl font-bold">Timeline for {currentProject?.title}</h1>
      <Card>
        <CardHeader>
          <CardTitle>Project Timeline</CardTitle>
          <CardDescription>Visualize your story's timeline</CardDescription>
        </CardHeader>
        <CardContent>
          <p>Timeline feature coming soon...</p>
        </CardContent>
      </Card>
    </div>
  )
}

export default WithProjectProtection(TimelinePage)

================
File: app/project-workspace/[id]/page.tsx
================
// app/project-workspace/[id]/page.tsx
'use client';

import React from 'react';
import { useProject } from '@/lib/contexts/ProjectContext';
import { WithProjectProtection } from '@/features/project/WithProjectProtection';
import Sidebar from '@/components/layout/Sidebar';
import { Button } from "@/components/ui/button";
import { Menu } from 'lucide-react';

function ProjectWorkspace() {
  const { currentProject } = useProject();
  const [isSidebarOpen, setIsSidebarOpen] = React.useState(true);

  if (!currentProject) {
    return <div className="flex justify-center items-center h-screen">Loading project...</div>;
  }

  return (
    <div className="flex h-screen overflow-hidden">
      {isSidebarOpen && <Sidebar />}
      <div className="flex-1 flex flex-col overflow-hidden">
        <header className="bg-white border-b p-4 flex justify-between items-center">
          <Button
            variant="ghost"
            size="icon"
            onClick={() => setIsSidebarOpen(!isSidebarOpen)}
            className="lg:hidden"
          >
            <Menu className="h-6 w-6" />
          </Button>
          <h1 className="text-2xl font-bold">{currentProject.title}</h1>
        </header>
        <main className="flex-1 overflow-auto p-6">
          <div className="mb-6">
            <h2 className="text-xl font-semibold mb-2">Project Details</h2>
            <p><strong>Description:</strong> {currentProject.description}</p>
            <p><strong>Progress:</strong> {currentProject.progress}%</p>
            <p><strong>Status:</strong> {currentProject.status}</p>
            <p><strong>Genre:</strong> {currentProject.genre}</p>
          </div>
        </main>
      </div>
    </div>
  );
}

export default WithProjectProtection(ProjectWorkspace);

================
File: app/projects/page.tsx
================
// app/projects/page.tsx
'use client';

import React, { useState, useEffect } from 'react'
import { Button } from "@/components/ui/button"
import { PlusCircle, Search } from 'lucide-react'
import { Input } from "@/components/ui/input"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import EmblaCarousel from '@/components/ui/carousel/EmblaCarousel'
import { useProjects } from '@/lib/hooks/useProjects'
import { Project } from '@/lib/types/types'
import { useRouter } from 'next/navigation'
import Link from 'next/link'

export default function ProjectsPage() {
  const [searchQuery, setSearchQuery] = useState('')
  const [sortBy, setSortBy] = useState('lastUpdated')
  const { projects, loading, error } = useProjects()
  const [groupedProjects, setGroupedProjects] = useState<{ [key: string]: Project[] }>({})
  const router = useRouter()

  useEffect(() => {
    if (projects.length > 0) {
      const grouped = projects.reduce((acc, project) => {
        if (!acc[project.genre]) {
          acc[project.genre] = [];
        }
        acc[project.genre].push(project);
        return acc;
      }, {} as { [key: string]: Project[] });
      setGroupedProjects(grouped);
    }
  }, [projects]);

  const handleViewProject = (projectId: string) => {
    router.push(`/project-workspace/${projectId}`);
  };

  const renderProjectSlide = (project: Project) => (
    <div className="embla__slide p-4" key={project.id}>
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden h-full flex flex-col">
        <div className="p-4 flex-grow">
          <h3 className="text-xl font-semibold mb-2">{project.title}</h3>
          <p className="text-gray-600 mb-4 text-sm">{project.description}</p>
          <div className="flex justify-between text-sm text-gray-500 mb-2">
            <span>{project.status}</span>
            <span>{project.progress}% complete</span>
          </div>
          <div className="w-full bg-gray-200 rounded-full h-1.5 mb-4">
            <div className="bg-gray-800 h-1.5 rounded-full" style={{ width: `${project.progress}%` }}></div>
          </div>
        </div>
        <div className="p-4 bg-gray-50">
          <Button 
            className="w-full" 
            variant="outline"
            onClick={() => handleViewProject(project.id)}
          >
            View Project
          </Button>
        </div>
      </div>
    </div>
  );

  if (loading) return <div className="flex justify-center items-center h-screen">Loading projects...</div>;
  if (error) return <div className="flex justify-center items-center h-screen">Error: {error.message}</div>;

  return (
    <div className="mx-auto max-w-screen-xl px-4 sm:px-6 lg:px-8 py-8">
      <div className="flex justify-between items-center mb-8">
        <h1 className="text-3xl font-bold">My Projects</h1>
        <Button>
          <PlusCircle className="mr-2 h-4 w-4" /> New Project
        </Button>
      </div>

      <div className="flex flex-col sm:flex-row justify-between items-center mb-8 space-y-4 sm:space-y-0 sm:space-x-4">
        <div className="relative w-full sm:w-1/2">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
          <Input
            type="text"
            placeholder="Search projects..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="pl-10 w-full"
          />
        </div>
        <Select value={sortBy} onValueChange={setSortBy}>
          <SelectTrigger className="w-full sm:w-[180px]">
            <SelectValue placeholder="Sort by" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="lastUpdated">Last Updated</SelectItem>
            <SelectItem value="title">Title</SelectItem>
          </SelectContent>
        </Select>
      </div>

      {Object.entries(groupedProjects).map(([genre, genreProjects]) => (
        <div key={genre} className="mb-12">
          <h2 className="text-2xl font-semibold mb-4">{genre}</h2>
          <EmblaCarousel
            slides={genreProjects}
            options={{ align: 'start', containScroll: 'trimSnaps' }}
            renderSlide={renderProjectSlide}
          />
        </div>
      ))}
    </div>
  );
}

================
File: app/scenes/page.tsx
================
'use client';

import React, { useState, useEffect } from 'react'
import { SceneCanvas } from '@/features/scenes/scene-canvas'
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { PlusCircle, Film, BookOpen } from 'lucide-react'
import { useSearchParams } from 'next/navigation'
import { FullScreenplayView } from '@/features/screenplay/full-screenplay-view'
import { Scene } from '@/lib/types/types'
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { useProject } from '@/lib/contexts/ProjectContext'
import { useToast } from "@/components/ui/use-toast"
import { WithProjectProtection } from '@/features/project/WithProjectProtection'

function ScenesPage() {
  const searchParams = useSearchParams()
  const { currentProject } = useProject()
  const { toast } = useToast()
  const [scenes, setScenes] = useState<Scene[]>([])
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    if (currentProject) {
      // Fetch scenes for the current project
      // This is where you'd typically make an API call
      setLoading(true)
      // Simulating API call with setTimeout
      setTimeout(() => {
        setScenes([
          { id: '1', title: 'Opening Scene', content: 'FADE IN...', order: 1, position: { x: 0, y: 0 }, connections: [], color: '#FFB3BA', type: 'scene' },
          { id: '2', title: 'Climax', content: 'The hero faces the villain...', order: 2, position: { x: 0, y: 0 }, connections: [], color: '#BAFFC9', type: 'scene' },
        ])
        setLoading(false)
      }, 1000)
    } else {
      toast({
        title: "No project selected",
        description: "Please select a project to view scenes.",
        variant: "destructive",
      })
    }
  }, [currentProject, toast])

  const handleAddScene = () => {
    if (!currentProject) {
      toast({
        title: "Cannot add scene",
        description: "Please select a project first.",
        variant: "destructive",
      })
      return
    }

    const newScene: Scene = {
      id: `scene-${Date.now()}`,
      title: 'New Scene',
      content: '',
      order: scenes.length + 1,
      position: { x: Math.random() * 500, y: Math.random() * 500 },
      connections: [],
      color: `#${Math.floor(Math.random()*16777215).toString(16)}`,
      type: 'scene'
    }
    setScenes([...scenes, newScene])
  }

  if (loading) {
    return <div>Loading scenes...</div>
  }

  return (
    <div className="space-y-8">
      <div className="flex justify-between items-center">
        <h1 className="text-4xl font-bold">Scenes for {currentProject?.title}</h1>
        <Button onClick={handleAddScene}>
          <PlusCircle className="mr-2 h-4 w-4" /> New Scene
        </Button>
      </div>

      <Tabs defaultValue="canvas" className="w-full">
        <TabsList>
          <TabsTrigger value="canvas">Visual Canvas</TabsTrigger>
          <TabsTrigger value="list">Scene List</TabsTrigger>
          <TabsTrigger value="full">Full Screenplay</TabsTrigger>
        </TabsList>
        <TabsContent value="canvas">
          <Card>
            <CardHeader>
              <CardTitle>Scene Canvas</CardTitle>
              <CardDescription>Visualize and organize your screenplay scenes</CardDescription>
            </CardHeader>
            <CardContent>
              <SceneCanvas projectId={currentProject?.id || null} />
            </CardContent>
          </Card>
        </TabsContent>
        <TabsContent value="list">
          <Card>
            <CardHeader>
              <CardTitle>Scene List</CardTitle>
              <CardDescription>View and manage your scenes in a list format</CardDescription>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Order</TableHead>
                    <TableHead>Title</TableHead>
                    <TableHead>Content Preview</TableHead>
                    <TableHead>Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {scenes.map((scene) => (
                    <TableRow key={scene.id}>
                      <TableCell>{scene.order}</TableCell>
                      <TableCell>{scene.title}</TableCell>
                      <TableCell>{scene.content.substring(0, 50)}...</TableCell>
                      <TableCell>
                        <Button variant="ghost">Edit</Button>
                        <Button variant="ghost">Delete</Button>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        </TabsContent>
        <TabsContent value="full">
          <Card>
            <CardHeader>
              <CardTitle>Full Screenplay</CardTitle>
              <CardDescription>View your entire screenplay</CardDescription>
            </CardHeader>
            <CardContent>
              <FullScreenplayView scenes={scenes} />
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}

export default WithProjectProtection(ScenesPage)

================
File: app/workspace/page.tsx
================
'use client'

import React, { useState } from 'react'
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Search, PlusCircle } from 'lucide-react'
import Overview from '@/features/workspace/Overview'
import EmblaCarousel from '@/components/ui/carousel/EmblaCarousel'
import { VisualizationCharts } from '@/features/workspace/VisualizationCharts'
import { TaskList } from '@/features/workspace/TaskList'
import { Project, Task, ActivityData, OverviewStat } from '@/lib/types/types'

// Mock data (replace with real data in production)
const overviewStats: OverviewStat[] = [
  { title: "Total Projects", value: "12" },
  { title: "In Progress", value: "8" },
  { title: "Completed", value: "4" },
  { title: "Total Revenue", value: "$45,231" },
]

const activityData: ActivityData[] = [
  { date: 'Mon', words: 1500 },
  { date: 'Tue', words: 2000 },
  { date: 'Wed', words: 1800 },
  { date: 'Thu', words: 2200 },
  { date: 'Fri', words: 1900 },
  { date: 'Sat', words: 1000 },
  { date: 'Sun', words: 2500 },
]

const projects: Project[] = [
  { id: "1", title: "The Raay Screenplay", description: "A futuristic sci-fi drama", progress: 80, status: "active", image: "/placeholder-project-image.jpg", genre: "Sci-Fi" },
  { id: "2", title: "Cosmic Odyssey", description: "An epic space adventure", progress: 30, status: "active", image: "/placeholder-project-image.jpg", genre: "Adventure" },
  { id: "3", title: "Neon Nights", description: "A cyberpunk thriller", progress: 100, status: "completed", image: "/placeholder-project-image.jpg", genre: "Thriller" },
  { id: "4", title: "Echoes of Eternity", description: "A time-travel romance", progress: 10, status: "active", image: "/placeholder-project-image.jpg", genre: "Romance" },
  { id: "5", title: "Whispers in the Wind", description: "A supernatural mystery", progress: 100, status: "completed", image: "/placeholder-project-image.jpg", genre: "Mystery" },
]

const tasks: Task[] = [
  { id: 1, title: "Outline Act 2", project: "The Raay Screenplay", dueDate: "2024-05-15", status: "in-progress" },
  { id: 2, title: "Character development for protagonist", project: "Cosmic Odyssey", dueDate: "2024-05-18", status: "pending" },
  { id: 3, title: "Research space travel mechanics", project: "Cosmic Odyssey", dueDate: "2024-05-20", status: "in-progress" },
  { id: 4, title: "Write climax scene", project: "The Raay Screenplay", dueDate: "2024-05-25", status: "pending" },
]

export default function WorkspacePage() {
  const [searchQuery, setSearchQuery] = useState("")

  const renderProjectSlide = (project: Project, index: number) => (
    <div className="embla__slide" key={index}>
      <div className="embla__slide__inner">
        <img
          className="embla__slide__img"
          src={project.image}
          alt={project.title}
        />
        <div className="embla__slide__content">
          <h3 className="embla__slide__title">{project.title}</h3>
          <p className="embla__slide__description">{project.description}</p>
          <div className="embla__slide__meta">
            <span>{project.genre}</span>
            <span>{project.status}</span>
          </div>
          <div className="embla__slide__progress">
            <div className="w-full bg-gray-200 rounded-full h-2.5 dark:bg-gray-700">
              <div className="bg-blue-600 h-2.5 rounded-full" style={{ width: `${project.progress}%` }}></div>
            </div>
          </div>
          <Button className="embla__slide__button">View Project</Button>
        </div>
      </div>
    </div>
  )

  return (
    <div className="min-h-screen bg-white">
      <main className="container mx-auto px-4 py-8">
        <div className="flex justify-between items-center mb-8">
          <div className="relative w-1/3">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
            <Input
              type="text"
              placeholder="Search projects, tasks, or documents"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="pl-10"
            />
          </div>
          <Button>
            <PlusCircle className="mr-2 h-4 w-4" /> New Project
          </Button>
        </div>

        <Overview stats={overviewStats} />
        <EmblaCarousel slides={projects} options={{ loop: false }} renderSlide={renderProjectSlide} />
        <VisualizationCharts activityData={activityData} projects={projects} />
        <TaskList tasks={tasks} />
      </main>
    </div>
  )
}

================
File: app/globals.css
================
/* app/globals.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 221.2 83.2% 53.3%;
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 221.2 83.2% 53.3%;
    --radius: 0.75rem;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;
    --primary: 217.2 91.2% 59.8%;
    --primary-foreground: 222.2 47.4% 11.2%;
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 224.3 76.3% 48%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

@layer components {
  .dash-nav {
    @apply w-80 transition-transform duration-300 ease-in-out;
  }

  @media (max-width: 1024px) {
    .dash-nav {
      @apply -translate-x-full;
    }

    .dash-nav.open {
      @apply translate-x-0;
    }
  }
}

@layer utilities {
  .pl-80 {
    padding-left: 20rem;
  }

  @media (max-width: 1024px) {
    .pl-80 {
      padding-left: 0;
    }
  }
}

================
File: app/layout.tsx
================
// app/layout.tsx
import './globals.css'
import '../styles/custom.css'
import type { Metadata } from 'next'
import { Inter } from 'next/font/google'
import { Toaster } from "@/components/ui/toaster"
import '@/styles/embla.css'
import { ProjectProvider } from '@/lib/contexts/ProjectContext'
import ErrorBoundary from '@/components/shared/ErrorBoundary'
import ClientLayout from '@/components/layout/ClientLayout'

const inter = Inter({ subsets: ['latin'] })

export const metadata: Metadata = {
  title: 'Raay',
  description: 'An interactive app for developing and organizing screenplays',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <ErrorBoundary>
          <ProjectProvider>
            <ClientLayout>{children}</ClientLayout>
            <Toaster />
          </ProjectProvider>
        </ErrorBoundary>
      </body>
    </html>
  )
}

================
File: app/page.tsx
================
// app/page.tsx
import React from 'react'
import Link from 'next/link'
import { Button } from "@/components/ui/button"
import { ArrowRight } from 'lucide-react'

export default function HomePage() {
  return (
    <div className="min-h-screen flex flex-col justify-center items-center bg-white text-gray-900">
      <main className="text-center">
        <h1 className="text-6xl font-bold mb-6">Raay</h1>
        <p className="text-xl mb-12 max-w-2xl">
          Craft your vision, frame by frame. The ultimate screenplay writing experience.
        </p>
        <div className="space-x-4">
          <Button asChild size="lg" className="px-8 py-6 text-lg rounded-full bg-gray-900 text-white hover:bg-gray-800 transition-all duration-300">
            <Link href="/sign-up">Get Started</Link>
          </Button>
          <Button asChild size="lg" variant="outline" className="px-8 py-6 text-lg rounded-full hover:bg-gray-100 transition-all duration-300">
            <Link href="/projects">Explore Projects <ArrowRight className="ml-2 h-5 w-5" /></Link>
          </Button>
        </div>
      </main>
      <footer className="absolute bottom-0 w-full text-center py-4">
        <p>&copy; 2024 Raay. All rights reserved.</p>
      </footer>
    </div>
  )
}

================
File: components/layout/ClientLayout.tsx
================
'use client'

import React from 'react'
import { usePathname } from 'next/navigation'
import { TopNavBar } from '@/components/layout/TopNavBar'
import Sidebar from '@/components/layout/Sidebar'

export default function ClientLayout({ children }: { children: React.ReactNode }) {
  const pathname = usePathname()
  
  // Determine if the current page should hide the sidebar
  const hideSidebarPaths = ['/', '/sign-in', '/sign-up', '/workspace', '/projects']
  const isInsideProjectWorkspace = pathname.startsWith('/project-workspace/')

  // Sidebar should only be hidden on specific paths and not within the [id] project workspace pages
  const shouldHideSidebar = hideSidebarPaths.some(path => pathname.startsWith(path)) && !isInsideProjectWorkspace

  return (
    <div className="flex flex-col min-h-screen">
      <TopNavBar />
      <div className="flex flex-1 pt-16"> {/* Add top padding to account for TopNavBar height */}
        {!shouldHideSidebar && (
          <div className="w-64 flex-shrink-0">
            <Sidebar />
          </div>
        )}
        <main className="flex-1 overflow-auto p-6">
          {children}
        </main>
      </div>
    </div>
  )
}

================
File: components/layout/DashNav.tsx
================
// components/DashNav.tsx
'use client';

import React from 'react';
import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { Home, FolderOpen, Lightbulb, X } from 'lucide-react';
import { cn } from "@/lib/utils/utils";

const DashNav: React.FC = () => {
  const pathname = usePathname();

  return (
    <nav className="dash-nav fixed top-0 left-0 h-full w-80 bg-white shadow-lg z-40 flex flex-col">
      <div className="flex justify-between items-center p-6">
        <Link href="/" className="text-2xl font-bold">Raay</Link>
        <button className="lg:hidden" aria-label="Close">
          <X className="h-6 w-6" />
        </button>
      </div>

      <ul className="flex-grow mt-6">
        <NavItem href="/workspace" icon={<Home />} text="Home" currentPath={pathname} />
        <NavItem href="/projects" icon={<FolderOpen />} text="Projects" currentPath={pathname} />
        <NavItem href="/idea-hub" icon={<Lightbulb />} text="Idea Hub" currentPath={pathname} />
      </ul>

      <div className="p-4">
        <button className="w-full bg-blue-500 text-white py-2 px-4 rounded-md hover:bg-blue-600 transition-colors">
          New Project
        </button>
      </div>
    </nav>
  );
};

interface NavItemProps {
  href: string;
  icon: React.ReactNode;
  text: string;
  currentPath: string | null;
}

const NavItem: React.FC<NavItemProps> = ({ href, icon, text, currentPath }) => {
  const isActive = currentPath === href;

  return (
    <li>
      <Link href={href} className={cn(
        "flex items-center space-x-3 px-4 py-3 text-gray-700 hover:bg-gray-100 transition-colors",
        isActive && "bg-gray-100 font-semibold"
      )}>
        {icon}
        <span>{text}</span>
      </Link>
    </li>
  );
};

export default DashNav;

================
File: components/layout/Sidebar.tsx
================
// components/layout/Sidebar.tsx
import React from 'react';
import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { cn } from "@/lib/utils/utils";
import {
  Home,
  Book,
  Users,
  Settings,
  PenTool,
  Calendar,
} from 'lucide-react';

interface NavItemProps {
  href: string;
  icon: React.ReactNode;
  text: string;
  currentPath: string;
}

const Sidebar: React.FC = () => {
  const pathname = usePathname();
  const projectId = pathname.split('/')[2];

  return (
    <div className="w-16 bg-gray-100 h-full fixed left-0 top-16 transition-all duration-300 hover:w-64 group">
      <nav className="flex flex-col h-full py-4">
        <NavItem href={`/project-workspace/${projectId}`} icon={<Home size={20} />} text="Dashboard" currentPath={pathname} />
        <NavItem href={`/project-workspace/${projectId}/script`} icon={<Book size={20} />} text="Script" currentPath={pathname} />
        <NavItem href={`/project-workspace/${projectId}/characters`} icon={<Users size={20} />} text="Characters" currentPath={pathname} />
        <NavItem href={`/project-workspace/${projectId}/scenes`} icon={<PenTool size={20} />} text="Scenes" currentPath={pathname} />
        <NavItem href={`/project-workspace/${projectId}/timeline`} icon={<Calendar size={20} />} text="Timeline" currentPath={pathname} />
        <NavItem href={`/project-workspace/${projectId}/settings`} icon={<Settings size={20} />} text="Settings" currentPath={pathname} />
      </nav>
    </div>
  );
};

const NavItem: React.FC<NavItemProps> = ({ href, icon, text, currentPath }) => {
  const isActive = currentPath === href;

  return (
    <Link href={href} className={cn(
      "flex items-center py-3 px-4 text-gray-700 hover:bg-gray-200 transition-colors",
      isActive && "bg-gray-200 text-gray-900",
      "overflow-hidden whitespace-nowrap"
    )}>
      <span className="mr-4">{icon}</span>
      <span className="opacity-0 group-hover:opacity-100 transition-opacity duration-300">{text}</span>
    </Link>
  );
};

export default Sidebar;

================
File: components/layout/TopNavBar.tsx
================
// components/layout/TopNavBar.tsx
import React from 'react'
import Link from 'next/link'
import { Button } from "@/components/ui/button"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Calendar } from 'lucide-react'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"

export function TopNavBar() {
  return (
    <nav className="flex justify-between items-center p-4 bg-white border-b fixed top-0 left-0 right-0 h-16 z-50">
      {/* App Name */}
      <Link href="/workspace" passHref>
        <Button variant="link" className="text-2xl font-bold text-gray-900 hover:text-gray-700">
          Raay
        </Button>
      </Link>

      {/* Right-side Navigation */}
      <div className="flex items-center space-x-6">
        <Link href="/workspace" passHref>
          <Button variant="ghost">Home</Button>
        </Link>
        <Link href="/projects" passHref>
          <Button variant="ghost">Projects</Button>
        </Link>

        {/* Other Options */}
        <Button variant="ghost" size="icon">
          <Calendar className="h-5 w-5" />
        </Button>
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="ghost" className="relative h-8 w-8 rounded-full">
              <Avatar className="h-8 w-8">
                <AvatarImage src="/avatars/01.png" alt="@johndoe" />
                <AvatarFallback>JD</AvatarFallback>
              </Avatar>
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent className="w-56" align="end" forceMount>
            <DropdownMenuLabel className="font-normal">
              <div className="flex flex-col space-y-1">
                <p className="text-sm font-medium leading-none">John Doe</p>
                <p className="text-xs leading-none text-muted-foreground">
                  john@example.com
                </p>
              </div>
            </DropdownMenuLabel>
            <DropdownMenuSeparator />
            <DropdownMenuItem>Profile</DropdownMenuItem>
            <DropdownMenuItem>Settings</DropdownMenuItem>
            <DropdownMenuSeparator />
            <DropdownMenuItem>Sign out</DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </div>
    </nav>
  )
}

================
File: components/layout/UserNav.tsx
================
import React from 'react'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Button } from "@/components/ui/button"

export function UserNav() {
  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" className="relative h-8 w-8 rounded-full">
          <Avatar className="h-8 w-8">
            <AvatarImage src="/images/user-avatar.jpg" alt="User" />
            <AvatarFallback>JD</AvatarFallback>
          </Avatar>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent className="w-56" align="end" forceMount>
        <DropdownMenuLabel className="font-normal">
          <div className="flex flex-col space-y-1">
            <p className="text-sm font-medium leading-none">John Doe</p>
            <p className="text-xs leading-none text-muted-foreground">
              john.doe@example.com
            </p>
          </div>
        </DropdownMenuLabel>
        <DropdownMenuSeparator />
        <DropdownMenuItem>Profile</DropdownMenuItem>
        <DropdownMenuItem>Settings</DropdownMenuItem>
        <DropdownMenuItem>Help</DropdownMenuItem>
        <DropdownMenuSeparator />
        <DropdownMenuItem>Log out</DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}

================
File: components/shared/ErrorBoundary.tsx
================
'use client';

import React, { Component, ErrorInfo, ReactNode } from 'react'

interface Props {
  children: ReactNode
  fallback?: ReactNode
}

interface State {
  hasError: boolean
}

class ErrorBoundary extends Component<Props, State> {
  public state: State = {
    hasError: false
  }

  public static getDerivedStateFromError(_: Error): State {
    return { hasError: true }
  }

  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    console.error("Uncaught error:", error, errorInfo)
  }

  public render() {
    if (this.state.hasError) {
      return this.props.fallback || <h1>Sorry.. there was an error</h1>
    }

    return this.props.children
  }
}

export default ErrorBoundary

================
File: components/ui/carousel/EmblaCarousel.tsx
================
import React, { useCallback, useEffect, useRef } from 'react'
import useEmblaCarousel from 'embla-carousel-react'
import { EmblaCarouselType, EmblaOptionsType } from 'embla-carousel'
import { NextButton, PrevButton, usePrevNextButtons } from './EmblaCarouselArrowButtons'
import { DotButton, useDotButton } from './EmblaCarouselDotButton'

const TWEEN_FACTOR = 0.2

type EmblaCarouselProps<T> = {
  slides: T[]
  options?: EmblaOptionsType
  renderSlide: (item: T, index: number) => React.ReactNode
}

const EmblaCarousel = <T,>({ slides, options, renderSlide }: EmblaCarouselProps<T>) => {
  const [emblaRef, emblaApi] = useEmblaCarousel(options)
  const tweenFactor = useRef(0)
  const tweenNodes = useRef<HTMLElement[]>([])

  const { selectedIndex, scrollSnaps, onDotButtonClick } = useDotButton(emblaApi)
  const { prevBtnDisabled, nextBtnDisabled, onPrevButtonClick, onNextButtonClick } = usePrevNextButtons(emblaApi)

  const setTweenNodes = useCallback((emblaApi: EmblaCarouselType) => {
    tweenNodes.current = emblaApi.slideNodes().map((slideNode) => {
      return slideNode.querySelector('.embla__parallax__layer') as HTMLElement
    })
  }, [])

  const setTweenFactor = useCallback((emblaApi: EmblaCarouselType) => {
    tweenFactor.current = TWEEN_FACTOR * emblaApi.scrollSnapList().length
  }, [])

  const tweenParallax = useCallback((emblaApi: EmblaCarouselType) => {
    const engine = emblaApi.internalEngine()
    const scrollProgress = emblaApi.scrollProgress()

    emblaApi.scrollSnapList().forEach((scrollSnap, snapIndex) => {
      const diffToTarget = scrollSnap - scrollProgress
      const tweenValue = diffToTarget * (-1 * tweenFactor.current)
      const tweenNode = tweenNodes.current[snapIndex]
      if (tweenNode) {
        tweenNode.style.transform = `translateX(${tweenValue}%)`
      }
    })
  }, [])

  useEffect(() => {
    if (!emblaApi) return

    setTweenNodes(emblaApi)
    setTweenFactor(emblaApi)
    tweenParallax(emblaApi)

    emblaApi.on('reInit', setTweenNodes)
    emblaApi.on('reInit', setTweenFactor)
    emblaApi.on('reInit', tweenParallax)
    emblaApi.on('scroll', tweenParallax)

    return () => {
      emblaApi.off('reInit', setTweenNodes)
      emblaApi.off('reInit', setTweenFactor)
      emblaApi.off('reInit', tweenParallax)
      emblaApi.off('scroll', tweenParallax)
    }
  }, [emblaApi, setTweenNodes, setTweenFactor, tweenParallax])

  return (
    <div className="embla">
      <div className="embla__viewport" ref={emblaRef}>
        <div className="embla__container">
          {slides.map((slide, index) => (
            <div className="embla__slide" key={index}>
              {renderSlide(slide, index)}
            </div>
          ))}
        </div>
      </div>
      <div className="embla__controls">
        <div className="embla__buttons">
          <PrevButton onClick={onPrevButtonClick} disabled={prevBtnDisabled} />
          <NextButton onClick={onNextButtonClick} disabled={nextBtnDisabled} />
        </div>
        <div className="embla__dots">
          {scrollSnaps.map((_, index) => (
            <DotButton
              key={index}
              onClick={() => onDotButtonClick(index)}
              className={'embla__dot'.concat(
                index === selectedIndex ? ' embla__dot--selected' : ''
              )}
            />
          ))}
        </div>
      </div>
    </div>
  )
}

export default EmblaCarousel

================
File: components/ui/carousel/EmblaCarouselArrowButtons.tsx
================
import React, {
    ComponentPropsWithRef,
    useCallback,
    useEffect,
    useState
  } from 'react'
  import { EmblaCarouselType } from 'embla-carousel'
  
  type UsePrevNextButtonsType = {
    prevBtnDisabled: boolean
    nextBtnDisabled: boolean
    onPrevButtonClick: () => void
    onNextButtonClick: () => void
  }
  
  export const usePrevNextButtons = (
    emblaApi: EmblaCarouselType | undefined,
    onButtonClick?: (emblaApi: EmblaCarouselType) => void
  ): UsePrevNextButtonsType => {
    const [prevBtnDisabled, setPrevBtnDisabled] = useState(true)
    const [nextBtnDisabled, setNextBtnDisabled] = useState(true)
  
    const onPrevButtonClick = useCallback(() => {
      if (!emblaApi) return
      emblaApi.scrollPrev()
      if (onButtonClick) onButtonClick(emblaApi)
    }, [emblaApi, onButtonClick])
  
    const onNextButtonClick = useCallback(() => {
      if (!emblaApi) return
      emblaApi.scrollNext()
      if (onButtonClick) onButtonClick(emblaApi)
    }, [emblaApi, onButtonClick])
  
    const onSelect = useCallback((emblaApi: EmblaCarouselType) => {
      setPrevBtnDisabled(!emblaApi.canScrollPrev())
      setNextBtnDisabled(!emblaApi.canScrollNext())
    }, [])
  
    useEffect(() => {
      if (!emblaApi) return
  
      onSelect(emblaApi)
      emblaApi.on('reInit', onSelect).on('select', onSelect)
    }, [emblaApi, onSelect])
  
    return {
      prevBtnDisabled,
      nextBtnDisabled,
      onPrevButtonClick,
      onNextButtonClick
    }
  }
  
  type PropType = ComponentPropsWithRef<'button'>
  
  export const PrevButton: React.FC<PropType> = (props) => {
    const { children, ...restProps } = props
  
    return (
      <button
        className="embla__button embla__button--prev"
        type="button"
        {...restProps}
      >
        <svg className="embla__button__svg" viewBox="0 0 532 532">
          <path
            fill="currentColor"
            d="M355.66 11.354c13.793-13.805 36.208-13.805 50.001 0 13.785 13.804 13.785 36.238 0 50.034L201.22 266l204.442 204.61c13.785 13.805 13.785 36.239 0 50.044-13.793 13.796-36.208 13.796-50.002 0a5994246.277 5994246.277 0 0 0-229.332-229.454 35.065 35.065 0 0 1-10.326-25.126c0-9.2 3.393-18.26 10.326-25.2C172.192 194.973 332.731 34.31 355.66 11.354Z"
          />
        </svg>
        {children}
      </button>
    )
  }
  
  export const NextButton: React.FC<PropType> = (props) => {
    const { children, ...restProps } = props
  
    return (
      <button
        className="embla__button embla__button--next"
        type="button"
        {...restProps}
      >
        <svg className="embla__button__svg" viewBox="0 0 532 532">
          <path
            fill="currentColor"
            d="M176.34 520.646c-13.793 13.805-36.208 13.805-50.001 0-13.785-13.804-13.785-36.238 0-50.034L330.78 266 126.34 61.391c-13.785-13.805-13.785-36.239 0-50.044 13.793-13.796 36.208-13.796 50.002 0 22.928 22.947 206.395 206.507 229.332 229.454a35.065 35.065 0 0 1 10.326 25.126c0 9.2-3.393 18.26-10.326 25.2-45.865 45.901-206.404 206.564-229.332 229.52Z"
          />
        </svg>
        {children}
      </button>
    )
  }

================
File: components/ui/carousel/EmblaCarouselDotButton.tsx
================
import React, {
    ComponentPropsWithRef,
    useCallback,
    useEffect,
    useState
  } from 'react'
  import { EmblaCarouselType } from 'embla-carousel'
  
  type UseDotButtonType = {
    selectedIndex: number
    scrollSnaps: number[]
    onDotButtonClick: (index: number) => void
  }
  
  export const useDotButton = (
    emblaApi: EmblaCarouselType | undefined,
    onButtonClick?: (emblaApi: EmblaCarouselType) => void
  ): UseDotButtonType => {
    const [selectedIndex, setSelectedIndex] = useState(0)
    const [scrollSnaps, setScrollSnaps] = useState<number[]>([])
  
    const onDotButtonClick = useCallback(
      (index: number) => {
        if (!emblaApi) return
        emblaApi.scrollTo(index)
        if (onButtonClick) onButtonClick(emblaApi)
      },
      [emblaApi, onButtonClick]
    )
  
    const onInit = useCallback((emblaApi: EmblaCarouselType) => {
      setScrollSnaps(emblaApi.scrollSnapList())
    }, [])
  
    const onSelect = useCallback((emblaApi: EmblaCarouselType) => {
      setSelectedIndex(emblaApi.selectedScrollSnap())
    }, [])
  
    useEffect(() => {
      if (!emblaApi) return
  
      onInit(emblaApi)
      onSelect(emblaApi)
  
      emblaApi.on('reInit', onInit).on('reInit', onSelect).on('select', onSelect)
    }, [emblaApi, onInit, onSelect])
  
    return {
      selectedIndex,
      scrollSnaps,
      onDotButtonClick
    }
  }
  
  type PropType = ComponentPropsWithRef<'button'>
  
  export const DotButton: React.FC<PropType> = (props) => {
    const { children, ...restProps } = props
  
    return (
      <button type="button" {...restProps}>
        {children}
      </button>
    )
  }

================
File: components/ui/avatar.tsx
================
import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }

================
File: components/ui/badge.tsx
================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }

================
File: components/ui/button.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

================
File: components/ui/card.tsx
================
// components/ui/card.tsx
import * as React from "react"
import { cn } from "@/lib/utils/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-white shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-gray-500", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

================
File: components/ui/dialog.tsx
================
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

================
File: components/ui/dropdown-menu.tsx
================
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}

================
File: components/ui/form.tsx
================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}

================
File: components/ui/input.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils/utils"

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

================
File: components/ui/label.tsx
================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

================
File: components/ui/progress.tsx
================
"use client";

import * as React from "react";
import * as ProgressPrimitive from "@radix-ui/react-progress";

import { cn } from "@/lib/utils/utils";

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root> & { value: number }
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
));

Progress.displayName = ProgressPrimitive.Root.displayName;

export { Progress };

================
File: components/ui/scroll-area.tsx
================
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }

================
File: components/ui/select.tsx
================
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-transparent px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
      className
    )}
    {...props}
  >
    {children}
    <ChevronDown className="h-4 w-4 opacity-50" />
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md animate-in fade-in-80",
        position === "popper" && "translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
}

================
File: components/ui/separator.tsx
================
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }

================
File: components/ui/switch.tsx
================
// components/ui/switch.tsx
"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-[24px] w-[44px] shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }

================
File: components/ui/table.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn("bg-primary font-medium text-primary-foreground", className)}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}

================
File: components/ui/tabs.tsx
================
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }

================
File: components/ui/textarea.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils/utils"

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }

================
File: components/ui/toast.tsx
================
"use client"

import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}

================
File: components/ui/toaster.tsx
================
"use client"

import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"
import { useToast } from "@/components/ui/use-toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}

================
File: components/ui/toggle.tsx
================
// components/ui/toggle.tsx
"use client"

import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3",
        sm: "h-9 px-2.5",
        lg: "h-11 px-5",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }

================
File: components/ui/toolbar.tsx
================
'use client';

import React from 'react';
import { Button } from '@/components/ui/button';

export function Toolbar() {
  return (
    <div className="toolbar">
      <Button variant="ghost" onClick={() => document.execCommand('bold')}>
        B
      </Button>
      <Button variant="ghost" onClick={() => document.execCommand('italic')}>
        I
      </Button>
      <Button variant="ghost" onClick={() => document.execCommand('underline')}>
        U
      </Button>
      <Button variant="ghost" onClick={() => insertScreenplayElement('Action')}>
        Action
      </Button>
      <Button variant="ghost" onClick={() => insertScreenplayElement('Scene Heading')}>
        Scene Heading
      </Button>
      <Button variant="ghost" onClick={() => insertScreenplayElement('Character')}>
        Character
      </Button>
      <Button variant="ghost" onClick={() => insertScreenplayElement('Dialogue')}>
        Dialogue
      </Button>
      <Button variant="ghost" onClick={() => insertScreenplayElement('Transition')}>
        Transition
      </Button>
    </div>
  );
}

const insertScreenplayElement = (type: string) => {
  const editor = document.querySelector('[contenteditable="true"]');
  if (!editor) return;

  const newElement = document.createElement('div');
  newElement.classList.add('screenplay-element');
  newElement.contentEditable = 'true';
  newElement.setAttribute('data-type', type);

  switch (type) {
    case 'Action':
      newElement.classList.add('action');
      newElement.textContent = 'Describe action here...';
      break;
    case 'Scene Heading':
      newElement.classList.add('scene-heading');
      newElement.textContent = 'INT./EXT. LOCATION - DAY/NIGHT';
      break;
    case 'Character':
      newElement.classList.add('character');
      newElement.textContent = 'CHARACTER NAME';
      break;
    case 'Dialogue':
      newElement.classList.add('dialogue');
      newElement.textContent = 'Character Dialogue...';
      break;
    case 'Transition':
      newElement.classList.add('transition');
      newElement.textContent = 'CUT TO:';
      break;
    default:
      break;
  }

  editor.appendChild(newElement);
  newElement.focus();
};

export default Toolbar;

================
File: components/ui/use-toast.ts
================
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

================
File: features/auth/Authform.tsx
================
'use client';

import React, { useState } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { useForm } from "react-hook-form";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { useToast } from "@/components/ui/use-toast";

const baseSchema = z.object({
  email: z.string().email("Invalid email address"),
  password: z.string().min(8, "Password must be at least 8 characters"),
});

const signInSchema = baseSchema;

const signUpSchema = baseSchema.extend({
  firstName: z.string().min(2, "First name must be at least 2 characters"),
  lastName: z.string().min(2, "Last name must be at least 2 characters"),
});

type FormData = z.infer<typeof signUpSchema>;

const AuthForm: React.FC<{ type: 'sign-in' | 'sign-up' }> = ({ type }) => {
  const router = useRouter();
  const { toast } = useToast();
  const [isLoading, setIsLoading] = useState(false);

  const form = useForm<FormData>({
    resolver: zodResolver(type === 'sign-in' ? signInSchema : signUpSchema),
    defaultValues: { email: "", password: "", firstName: "", lastName: "" },
  });

  const onSubmit = async (data: FormData) => {
    setIsLoading(true);
    try {
      // Here you would typically call your authentication API
      console.log('Form data:', data);
      
      if (type === 'sign-up') {
        // Simulating sign up
        toast({
          title: "Account created successfully",
          description: "Welcome to Raay! Please sign in with your new account.",
        });
        router.push('/sign-in');
      } else {
        // Simulating sign in
        toast({
          title: "Signed in successfully",
          description: "Welcome back to Raay!",
        });
        router.push('/workspace');
      }
    } catch (error) {
      console.error('Authentication error:', error);
      toast({
        variant: "destructive",
        title: "Authentication Error",
        description: error instanceof Error ? error.message : "An unexpected error occurred. Please try again.",
      });
    } finally {
      setIsLoading(false);
    }
  };

  const fields = type === 'sign-in'
    ? ['email', 'password']
    : ['firstName', 'lastName', 'email', 'password'];

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold">{type === 'sign-in' ? 'Welcome back' : 'Create an account'}</h1>
        <p className="text-gray-600 mt-2">{type === 'sign-in' ? 'Sign in to continue' : 'Sign up to get started'}</p>
      </div>

      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
          {fields.map((name) => (
            <FormField
              key={name}
              control={form.control}
              name={name as keyof FormData}
              render={({ field }) => (
                <FormItem>
                  <FormLabel className="capitalize">{name.replace(/([A-Z])/g, ' $1').trim()}</FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      type={name === 'password' ? 'password' : 'text'}
                      placeholder={`Enter your ${name.replace(/([A-Z])/g, ' $1').trim()}`}
                      autoComplete={
                        name === 'password' ? 'new-password' :
                        name === 'email' ? 'email' :
                        'off'
                      }
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          ))}
          <Button type="submit" className="w-full bg-gradient-to-r from-blue-500 to-blue-700 hover:from-blue-600 hover:to-blue-800 text-white font-bold py-2 px-4 rounded-lg shadow-lg transform transition duration-200 ease-in-out hover:scale-105">
            {isLoading ? 'Processing...' : (type === 'sign-in' ? 'Sign In' : 'Sign Up')}
          </Button>
        </form>
      </Form>

      <div className="text-center text-sm">
        <span className="text-gray-600">
          {type === 'sign-in' ? "Don't have an account?" : 'Already have an account?'}
        </span>
        <Link href={type === 'sign-in' ? '/sign-up' : '/sign-in'} className="text-blue-600 hover:underline ml-1">
          {type === 'sign-in' ? 'Sign up' : 'Sign in'}
        </Link>
      </div>
    </div>
  );
};

export default AuthForm;

================
File: features/project/CreateProject.tsx
================
import React, { useState } from 'react'
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Textarea } from "@/components/ui/textarea"

interface CreateProjectProps {
  isOpen: boolean
  onClose: () => void
}

const CreateProject: React.FC<CreateProjectProps> = ({ isOpen, onClose }) => {
  const [title, setTitle] = useState('')
  const [description, setDescription] = useState('')
  const [genre, setGenre] = useState('')

  const handleCreate = () => {
    // Here you would typically make an API call to create the project
    console.log('Creating project:', { title, description, genre })
    // Reset form and close dialog
    setTitle('')
    setDescription('')
    setGenre('')
    onClose()
  }

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Create New Project</DialogTitle>
        </DialogHeader>
        <div className="grid gap-4 py-4">
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="title" className="text-right">
              Title
            </Label>
            <Input
              id="title"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              className="col-span-3"
            />
          </div>
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="description" className="text-right">
              Description
            </Label>
            <Textarea
              id="description"
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              className="col-span-3"
            />
          </div>
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="genre" className="text-right">
              Genre
            </Label>
            <Select value={genre} onValueChange={setGenre}>
              <SelectTrigger className="col-span-3">
                <SelectValue placeholder="Select genre" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="Action">Action</SelectItem>
                <SelectItem value="Comedy">Comedy</SelectItem>
                <SelectItem value="Drama">Drama</SelectItem>
                <SelectItem value="Horror">Horror</SelectItem>
                <SelectItem value="Thriller">Thriller</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </div>
        <DialogFooter>
          <Button type="submit" onClick={handleCreate}>Create Project</Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}

export default CreateProject

================
File: features/project/Dashboard.tsx
================
// app/projects/page.tsx
'use client';

import React, { useState, useEffect } from 'react'
import { Button } from "@/components/ui/button"
import { PlusCircle, Search } from 'lucide-react'
import { Input } from "@/components/ui/input"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import EmblaCarousel from '@/components/ui/carousel/EmblaCarousel'
import { useProjects } from '@/lib/hooks/useProjects'
import { Project } from '@/lib/types/types'
import { ProjectStats } from '@/features/project/ProjectStats'
import Link from 'next/link'

export default function ProjectsPage() {
  const [searchQuery, setSearchQuery] = useState('')
  const [sortBy, setSortBy] = useState('lastUpdated')
  const { projects, loading, error } = useProjects()
  const [groupedProjects, setGroupedProjects] = useState<{[key: string]: Project[]}>({})

  useEffect(() => {
    if (projects.length > 0) {
      const grouped = projects.reduce((acc, project) => {
        if (!acc[project.genre]) {
          acc[project.genre] = []
        }
        acc[project.genre].push(project)
        return acc
      }, {} as {[key: string]: Project[]})
      setGroupedProjects(grouped)
    }
  }, [projects])

  if (loading) return <div className="flex justify-center items-center h-screen">Loading projects...</div>
  if (error) return <div className="flex justify-center items-center h-screen">Error: {error.message}</div>

  const renderProjectSlide = (project: Project) => (
    <div className="embla__slide p-4">
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden h-full flex flex-col">
        <div className="p-4 flex-grow">
          <h3 className="text-xl font-semibold mb-2">{project.title}</h3>
          <p className="text-gray-600 mb-4 text-sm">{project.description}</p>
          <div className="flex justify-between text-sm text-gray-500 mb-2">
            <span>{project.status}</span>
            <span>{project.progress}% complete</span>
          </div>
          <div className="w-full bg-gray-200 rounded-full h-1.5 mb-4">
            <div className="bg-gray-800 h-1.5 rounded-full" style={{ width: `${project.progress}%` }}></div>
          </div>
        </div>
        <div className="p-4 bg-gray-50">
          <Link href={`/project/${project.id}`} passHref>
            <Button className="w-full" variant="outline">View Project</Button>
          </Link>
        </div>
      </div>
    </div>
  )

  return (
    <div className="mx-auto max-w-screen-xl px-4 sm:px-6 lg:px-8 py-8">
      <div className="flex justify-between items-center mb-8">
        <h1 className="text-3xl font-bold">My Projects</h1>
        <Button>
          <PlusCircle className="mr-2 h-4 w-4" /> New Project
        </Button>
      </div>

      <div className="flex flex-col sm:flex-row justify-between items-center mb-8 space-y-4 sm:space-y-0 sm:space-x-4">
        <div className="relative w-full sm:w-1/2">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
          <Input
            type="text"
            placeholder="Search projects..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="pl-10 w-full"
          />
        </div>
        <Select value={sortBy} onValueChange={setSortBy}>
          <SelectTrigger className="w-full sm:w-[180px]">
            <SelectValue placeholder="Sort by" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="lastUpdated">Last Updated</SelectItem>
            <SelectItem value="title">Title</SelectItem>
          </SelectContent>
        </Select>
      </div>

      {Object.entries(groupedProjects).map(([genre, genreProjects]) => (
        <div key={genre} className="mb-12">
          <h2 className="text-2xl font-semibold mb-4">{genre}</h2>
          <EmblaCarousel
            slides={genreProjects}
            options={{ align: 'start', containScroll: 'trimSnaps' }}
            renderSlide={renderProjectSlide}
          />
        </div>
      ))}
    </div>
  )
}

================
File: features/project/ProjectStats.tsx
================
// components/ProjectStats.tsx
import React from 'react'
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Progress } from "@/components/ui/progress"
import { Button } from "@/components/ui/button"
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts'
import Link from 'next/link'

const data = [
  { name: 'Mon', words: 1500 },
  { name: 'Tue', words: 2000 },
  { name: 'Wed', words: 1800 },
  { name: 'Thu', words: 2200 },
  { name: 'Fri', words: 1900 },
  { name: 'Sat', words: 1000 },
  { name: 'Sun', words: 2500 },
]

interface ProjectStatsProps {
  projectId: string
}

export function ProjectStats({ projectId }: ProjectStatsProps) {
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
      <Card>
        <CardHeader>
          <CardTitle>Overall Progress</CardTitle>
        </CardHeader>
        <CardContent>
          <Progress value={75} className="w-full" />
          <p className="text-center mt-2">75% Complete</p>
        </CardContent>
      </Card>
      <Card>
        <CardHeader>
          <CardTitle>Total Word Count</CardTitle>
        </CardHeader>
        <CardContent>
          <h3 className="text-4xl font-bold text-center">52,890</h3>
          <p className="text-center text-gray-500">words written</p>
        </CardContent>
      </Card>
      <Card className="md:col-span-2">
        <CardHeader>
          <CardTitle>Writing Activity</CardTitle>
        </CardHeader>
        <CardContent>
          <ResponsiveContainer width="100%" height={300}>
            <BarChart data={data}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="name" />
              <YAxis />
              <Tooltip />
              <Bar dataKey="words" fill="#3498db" />
            </BarChart>
          </ResponsiveContainer>
        </CardContent>
      </Card>
      <Card className="md:col-span-2">
        <CardHeader>
          <CardTitle>Project Actions</CardTitle>
        </CardHeader>
        <CardContent>
          <Link href={`/project/${projectId}`} passHref>
            <Button className="w-full">View Project Workspace</Button>
          </Link>
        </CardContent>
      </Card>
    </div>
  )
}

================
File: features/project/Script.tsx
================
// components/project/Script.tsx
import React, { useState } from 'react'
import { useForm, Controller } from 'react-hook-form'
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { Select } from "@/components/ui/select"

const Script: React.FC = () => {
  const [formattedContent, setFormattedContent] = useState('')
  const { control, handleSubmit } = useForm()

  const onSubmit = (data: any) => {
    const formatted = formatScreenplay(data.content)
    setFormattedContent(formatted)
  }

  const formatScreenplay = (content: string) => {
    const lines = content.split('\n')
    return lines.map((line) => {
      if (line.trim().toUpperCase() === line.trim()) {
        return `<p class="character">${line.trim()}</p>`
      } else if (line.trim().startsWith('(') && line.trim().endsWith(')')) {
        return `<p class="parenthetical">${line.trim()}</p>`
      } else if (line.trim().startsWith('INT.') || line.trim().startsWith('EXT.')) {
        return `<p class="scene-heading">${line.trim().toUpperCase()}</p>`
      } else if (line.trim() === '') {
        return '<p class="blank-line">&nbsp;</p>'
      } else {
        return `<p class="action">${line.trim()}</p>`
      }
    }).join('')
  }

  return (
    <div className="max-w-3xl mx-auto">
      <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
        <Controller
          name="content"
          control={control}
          defaultValue=""
          render={({ field }) => (
            <Textarea
              {...field}
              placeholder="Enter your screenplay..."
              rows={20}
              className="font-mono text-sm"
            />
          )}
        />
        <div className="flex space-x-2">
          <Button type="submit">Format Screenplay</Button>
          <Select>
            <option value="scene-heading">Scene Heading</option>
            <option value="action">Action</option>
            <option value="character">Character</option>
            <option value="dialogue">Dialogue</option>
            <option value="parenthetical">Parenthetical</option>
            <option value="transition">Transition</option>
          </Select>
        </div>
      </form>
      {formattedContent && (
        <div className="mt-8">
          <h2 className="text-2xl font-bold mb-4">Formatted Screenplay</h2>
          <div
            className="screenplay-formatted font-mono text-sm border p-4"
            dangerouslySetInnerHTML={{ __html: formattedContent }}
          />
        </div>
      )}
      <style jsx>{`
        .screenplay-formatted .scene-heading {
          text-transform: uppercase;
          margin-top: 2em;
        }
        .screenplay-formatted .action {
          margin-top: 1em;
        }
        .screenplay-formatted .character {
          margin-top: 1em;
          margin-left: 40%;
          text-transform: uppercase;
        }
        .screenplay-formatted .parenthetical {
          margin-left: 30%;
        }
        .screenplay-formatted .dialogue {
          margin-left: 25%;
          margin-right: 25%;
        }
      `}</style>
    </div>
  )
}

export default Script

================
File: features/project/WithProjectProtection.tsx
================
// components/WithProjectProtection.tsx
'use client'

import { useProject } from '@/lib/contexts/ProjectContext'
import { useRouter, useParams } from 'next/navigation'
import { useEffect } from 'react'

export function WithProjectProtection<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  return function WithProjectProtectionWrapper(props: P) {
    const { currentProject, setCurrentProject } = useProject()
    const router = useRouter()
    const params = useParams()
    const projectId = params.id as string

    useEffect(() => {
      const fetchProject = async () => {
        if (projectId && (!currentProject || currentProject.id !== projectId)) {
          try {
            // Here you would typically make an API call to fetch the project details
            // For now, we'll simulate it with a timeout and mock data
            await new Promise(resolve => setTimeout(resolve, 500))
            const mockProject = {
              id: projectId,
              title: `Project ${projectId}`,
              description: `Description for Project ${projectId}`,
              progress: 65,
              status: 'in-progress',
              genre: 'Sci-Fi',
              image: ''
            }
            setCurrentProject(mockProject)
          } catch (error) {
            console.error('Error fetching project:', error)
            router.push('/projects')
          }
        }
      }

      fetchProject()
    }, [projectId, currentProject, setCurrentProject, router])

    if (!currentProject) {
      return <div>Loading project...</div> // or a loading spinner
    }

    return <WrappedComponent {...props} />
  }
}

================
File: features/scenes/scene-block.tsx
================
import React from 'react'
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Pencil, Link, Trash, Tag } from 'lucide-react'
import { Scene } from '@/lib/types/types'
import { Badge } from "@/components/ui/badge"

interface SceneBlockProps extends Omit<Scene, 'connections'> {
  onMove: (id: string, newPosition: { x: number; y: number }) => void
  onEdit: (id: string) => void
  onConnect: (id: string) => void
  onDelete: (id: string) => void
  onAddTag: (id: string, tag: string) => void
}

export function SceneBlock({ id, title, content, position, color, tags, onMove, onEdit, onConnect, onDelete, onAddTag }: SceneBlockProps) {
  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement>) => {
    const startX = e.clientX
    const startY = e.clientY

    const handleMouseMove = (e: MouseEvent) => {
      const deltaX = e.clientX - startX
      const deltaY = e.clientY - startY
      onMove(id, { x: position.x + deltaX, y: position.y + deltaY })
    }

    const handleMouseUp = () => {
      document.removeEventListener('mousemove', handleMouseMove)
      document.removeEventListener('mouseup', handleMouseUp)
    }

    document.addEventListener('mousemove', handleMouseMove)
    document.addEventListener('mouseup', handleMouseUp)
  }

  const handleAddTag = () => {
    const tag = prompt("Enter a new tag:")
    if (tag) {
      onAddTag(id, tag)
    }
  }

  return (
    <Card
      className="w-64 absolute cursor-move"
      style={{
        left: `${position.x}px`,
        top: `${position.y}px`,
        backgroundColor: color,
      }}
      onMouseDown={handleMouseDown}
    >
      <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
        <CardTitle className="text-sm font-medium">{title}</CardTitle>
        <div className="flex space-x-2">
          <Button size="icon" variant="ghost" onClick={() => onConnect(id)}>
            <Link className="h-4 w-4" />
          </Button>
          <Button size="icon" variant="ghost" onClick={() => onEdit(id)}>
            <Pencil className="h-4 w-4" />
          </Button>
          <Button size="icon" variant="ghost" onClick={() => onDelete(id)}>
            <Trash className="h-4 w-4" />
          </Button>
          <Button size="icon" variant="ghost" onClick={handleAddTag}>
            <Tag className="h-4 w-4" />
          </Button>
        </div>
      </CardHeader>
      <CardContent>
        <p className="text-xs text-muted-foreground">{content.substring(0, 100)}...</p>
        <div className="mt-2 flex flex-wrap gap-1">
          {tags && tags.map((tag, index) => (
            <Badge key={index} variant="secondary">{tag}</Badge>
          ))}
        </div>
      </CardContent>
    </Card>
  )
}

================
File: features/scenes/scene-canvas.tsx
================
'use client';

import React, { useState, useEffect } from 'react'
import { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd'
import { SceneBlock } from './scene-block'
import { SceneConnection } from './scene-connection'
import { Button } from "@/components/ui/button"
import { Plus } from 'lucide-react'
import { SceneEditor } from './scene-editor'
import { Scene } from '@/lib/types/types'

interface SceneCanvasProps {
  projectId: string | null
}

export function SceneCanvas({ projectId }: SceneCanvasProps) {
  const [scenes, setScenes] = useState<Scene[]>([])
  const [editingScene, setEditingScene] = useState<Scene | null>(null)

  useEffect(() => {
    // Load scenes for the current project
    // This is where you'd typically fetch data from an API
    if (projectId) {
      // Simulating API call
      const mockScenes: Scene[] = [
        { 
          id: '1', 
          title: 'Opening Scene', 
          content: 'Fade in...', 
          position: { x: 100, y: 100 }, 
          connections: [], 
          order: 1, 
          color: '#FFB3BA',
          type: 'scene',
          characters: [],
          storyPhase: 'Act 1: Setup'
        },
        { 
          id: '2', 
          title: 'Climax', 
          content: 'The hero faces the villain...', 
          position: { x: 400, y: 300 }, 
          connections: [], 
          order: 2, 
          color: '#BAFFC9',
          type: 'scene',
          characters: [],
          storyPhase: 'Act 2: Confrontation'
        },
      ]
      setScenes(mockScenes)
    }
  }, [projectId])

  const handleDragEnd = (result: DropResult) => {
    if (!result.destination) return

    const newScenes = Array.from(scenes)
    const [reorderedScene] = newScenes.splice(result.source.index, 1)
    newScenes.splice(result.destination.index, 0, reorderedScene)

    // Update scene orders
    const updatedScenes = newScenes.map((scene, index) => ({
      ...scene,
      order: index + 1
    }))

    setScenes(updatedScenes)
    // Here you would also update the scene order in your backend
  }

  const handleAddScene = () => {
    const newScene: Scene = {
      id: `scene-${Date.now()}`,
      title: `New Scene`,
      content: '',
      position: { x: Math.random() * 500, y: Math.random() * 500 },
      connections: [],
      order: scenes.length + 1,
      color: `#${Math.floor(Math.random()*16777215).toString(16)}`, // Random color
      type: 'scene',
      characters: [],
      storyPhase: 'Unassigned'
    }
    setScenes([...scenes, newScene])
  }

  const handleMoveScene = (id: string, newPosition: { x: number; y: number }) => {
    setScenes(scenes.map(scene => 
      scene.id === id ? { ...scene, position: newPosition } : scene
    ))
  }

  const handleEditScene = (id: string) => {
    const scene = scenes.find(s => s.id === id)
    if (scene) {
      setEditingScene(scene)
    }
  }

  const handleSaveScene = (updatedScene: Scene) => {
    setScenes(scenes.map(scene => 
      scene.id === updatedScene.id ? updatedScene : scene
    ))
    setEditingScene(null)
  }

  const handleDeleteScene = (id: string) => {
    setScenes(scenes.filter(scene => scene.id !== id))
  }

  const handleAddTag = (id: string, tag: string) => {
    setScenes(scenes.map(scene => 
      scene.id === id ? { ...scene, tags: [...(scene.tags || []), tag] } : scene
    ))
  }
  
  const handleConnectScene = (id: string) => {
    // Implement connection logic here
  }

  return (
    <DragDropContext onDragEnd={handleDragEnd}>
      <Droppable droppableId="scenes">
        {(provided) => (
          <div 
            {...provided.droppableProps}
            ref={provided.innerRef}
            className="relative w-full h-[600px] border border-gray-200 rounded-lg overflow-hidden bg-gray-50"
          >
            {scenes.map((scene, index) => (
              <Draggable key={scene.id} draggableId={scene.id} index={index}>
                {(provided) => (
                  <div
                    ref={provided.innerRef}
                    {...provided.draggableProps}
                    {...provided.dragHandleProps}
                  >
                    <SceneBlock
                      {...scene}
                      onMove={handleMoveScene}
                      onEdit={handleEditScene}
                      onConnect={handleConnectScene}
                      onDelete={handleDeleteScene}
                      onAddTag={handleAddTag}
                    />
                    {scene.connections.map(connectedId => {
                      const connectedScene = scenes.find(s => s.id === connectedId)
                      if (connectedScene) {
                        return <SceneConnection key={`${scene.id}-${connectedId}`} scene1={scene} scene2={connectedScene} />
                      }
                      return null
                    })}
                  </div>
                )}
              </Draggable>
            ))}
            {provided.placeholder}
            <Button
              className="absolute bottom-4 right-4"
              onClick={handleAddScene}
            >
              <Plus className="mr-2 h-4 w-4" /> Add Scene
            </Button>
          </div>
        )}
      </Droppable>
      {editingScene && (
        <SceneEditor
          scene={editingScene}
          onSave={handleSaveScene}
          onClose={() => setEditingScene(null)}
        />
      )}
    </DragDropContext>
  )
}

================
File: features/scenes/scene-connection.tsx
================
import React from 'react'
import { Scene } from '@/lib/types/types'

interface SceneConnectionProps {
  scene1: Scene
  scene2: Scene
}

export function SceneConnection({ scene1, scene2 }: SceneConnectionProps) {
  const startX = scene1.position.x + 128 // Assuming scene block width is 256px
  const startY = scene1.position.y + 80 // Assuming scene block height is 160px
  const endX = scene2.position.x + 128
  const endY = scene2.position.y + 80

  const pathD = `M${startX},${startY} C${(startX + endX) / 2},${startY} ${(startX + endX) / 2},${endY} ${endX},${endY}`

  return (
    <svg className="absolute top-0 left-0 w-full h-full pointer-events-none">
      <path
        d={pathD}
        fill="none"
        stroke="rgba(59, 130, 246, 0.5)"
        strokeWidth="2"
      />
    </svg>
  )
}

================
File: features/scenes/scene-editor.tsx
================
import React, { useState, useEffect } from 'react'
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Scene, Character, Location } from '@/lib/types/types'
import { formatScreenplayContent, estimatePageCount, autoCompleteCharacter, autoCompleteLocation } from '@/lib/utils/utils'
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"

interface SceneEditorProps {
  scene: Scene
  onSave: (updatedScene: Scene) => void
  onClose: () => void
  characters: Character[]
  locations: Location[]
}

export function SceneEditor({ scene, onSave, onClose, characters, locations }: SceneEditorProps) {
  const [title, setTitle] = useState(scene.title)
  const [content, setContent] = useState(scene.content)
  const [formattedContent, setFormattedContent] = useState('')
  const [pageCount, setPageCount] = useState(0)
  const [lineCount, setLineCount] = useState(0)
  const [sceneType, setSceneType] = useState(scene.type || 'scene')

  useEffect(() => {
    const formatted = formatScreenplayContent(content)
    setFormattedContent(formatted)
    setPageCount(estimatePageCount([{ ...scene, content }]))
    setLineCount(content.split('\n').length)
  }, [content])

  const handleContentChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    const newContent = e.target.value
    setContent(newContent)
    
    // Auto-formatting
    const lines = newContent.split('\n')
    const formattedLines = lines.map(line => {
      if (line.trim().toUpperCase() === line.trim()) {
        return line.trim() // Character names
      } else if (line.trim().startsWith('(') && line.trim().endsWith(')')) {
        return `  ${line.trim()}` // Parentheticals
      } else if (line.trim().startsWith('INT.') || line.trim().startsWith('EXT.')) {
        return line.trim().toUpperCase() // Scene headings
      } else if (['FADE IN:', 'FADE OUT.', 'CUT TO:'].includes(line.trim().toUpperCase())) {
        return `\n${line.trim().toUpperCase()}\n` // Transitions
      } else {
        return `    ${line.trim()}` // Action and dialogue
      }
    })
    setContent(formattedLines.join('\n'))
  }

  const handleCharacterAutocomplete = (input: string) => {
    return autoCompleteCharacter(input, characters.map(c => c.name))
  }

  const handleLocationAutocomplete = (input: string) => {
    return autoCompleteLocation(input, locations.map(l => l.name))
  }

  const handleSave = () => {
    onSave({ ...scene, title, content, type: sceneType })
  }

  return (
    <Dialog open={true} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-[800px]">
        <DialogHeader>
          <DialogTitle>Edit Scene: {scene.title}</DialogTitle>
        </DialogHeader>
        <div className="grid gap-4 py-4">
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="title" className="text-right">Scene Title</Label>
            <Input
              id="title"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              className="col-span-3"
            />
          </div>
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="sceneType" className="text-right">Scene Type</Label>
            <Select value={sceneType} onValueChange={setSceneType}>
              <SelectTrigger className="col-span-3">
                <SelectValue placeholder="Select scene type" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="scene">Scene</SelectItem>
                <SelectItem value="transition">Transition</SelectItem>
                <SelectItem value="montage">Montage</SelectItem>
                <SelectItem value="intercut">Intercut</SelectItem>
              </SelectContent>
            </Select>
          </div>
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="content" className="text-right">Scene Content</Label>
            <Textarea
              id="content"
              value={content}
              onChange={handleContentChange}
              className="col-span-3 font-mono"
              rows={20}
              style={{
                lineHeight: '1.5',
                padding: '1rem',
                whiteSpace: 'pre-wrap',
              }}
            />
          </div>
          <div className="grid grid-cols-4 items-center gap-4">
            <Label className="text-right">Preview</Label>
            <div className="col-span-3 font-mono whitespace-pre-wrap border p-4">
              {formattedContent}
            </div>
          </div>
          <div className="grid grid-cols-4 items-center gap-4">
            <Label className="text-right">Statistics</Label>
            <div className="col-span-3">
              <p>Page Count: {pageCount}</p>
              <p>Line Count: {lineCount}</p>
            </div>
          </div>
        </div>
        <DialogFooter>
          <Button type="submit" onClick={handleSave}>Save changes</Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}

================
File: features/scenes/SceneGoalsConflict.tsx
================
import React, { useState } from 'react'
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Plus, Minus } from 'lucide-react'

interface GoalConflict {
  id: string
  type: 'goal' | 'conflict'
  content: string
}

interface SceneGoalsConflictsProps {
  initialGoalsConflicts: GoalConflict[]
  onUpdate: (goalsConflicts: GoalConflict[]) => void
}

export function SceneGoalsConflicts({ initialGoalsConflicts, onUpdate }: SceneGoalsConflictsProps) {
  const [goalsConflicts, setGoalsConflicts] = useState<GoalConflict[]>(initialGoalsConflicts)

  const handleAdd = (type: 'goal' | 'conflict') => {
    const newItem: GoalConflict = {
      id: Date.now().toString(),
      type,
      content: ''
    }
    const updatedGoalsConflicts = [...goalsConflicts, newItem]
    setGoalsConflicts(updatedGoalsConflicts)
    onUpdate(updatedGoalsConflicts)
  }

  const handleRemove = (id: string) => {
    const updatedGoalsConflicts = goalsConflicts.filter(item => item.id !== id)
    setGoalsConflicts(updatedGoalsConflicts)
    onUpdate(updatedGoalsConflicts)
  }

  const handleChange = (id: string, content: string) => {
    const updatedGoalsConflicts = goalsConflicts.map(item =>
      item.id === id ? { ...item, content } : item
    )
    setGoalsConflicts(updatedGoalsConflicts)
    onUpdate(updatedGoalsConflicts)
  }

  return (
    <div className="space-y-4">
      <div>
        <h3 className="text-lg font-semibold mb-2">Scene Goals</h3>
        {goalsConflicts.filter(item => item.type === 'goal').map((goal) => (
          <div key={goal.id} className="flex items-center space-x-2 mb-2">
            <Textarea
              value={goal.content}
              onChange={(e) => handleChange(goal.id, e.target.value)}
              placeholder="Enter scene goal..."
              className="flex-grow"
            />
            <Button size="icon" variant="ghost" onClick={() => handleRemove(goal.id)}>
              <Minus className="h-4 w-4" />
            </Button>
          </div>
        ))}
        <Button onClick={() => handleAdd('goal')}>
          <Plus className="mr-2 h-4 w-4" /> Add Goal
        </Button>
      </div>
      <div>
        <h3 className="text-lg font-semibold mb-2">Scene Conflicts</h3>
        {goalsConflicts.filter(item => item.type === 'conflict').map((conflict) => (
          <div key={conflict.id} className="flex items-center space-x-2 mb-2">
            <Textarea
              value={conflict.content}
              onChange={(e) => handleChange(conflict.id, e.target.value)}
              placeholder="Enter scene conflict..."
              className="flex-grow"
            />
            <Button size="icon" variant="ghost" onClick={() => handleRemove(conflict.id)}>
              <Minus className="h-4 w-4" />
            </Button>
          </div>
        ))}
        <Button onClick={() => handleAdd('conflict')}>
          <Plus className="mr-2 h-4 w-4" /> Add Conflict
        </Button>
      </div>
    </div>
  )
}

================
File: features/scenes/SceneHistory.tsx
================
import React, { useState, useEffect } from 'react'
import { Button } from "@/components/ui/button"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Scene } from '@/lib/types/types'

interface SceneVersion extends Scene {
  version: number
  timestamp: Date
}

interface SceneHistoryProps {
  sceneId: string
  onRevertToVersion: (version: SceneVersion) => void
}

export function SceneHistory({ sceneId, onRevertToVersion }: SceneHistoryProps) {
  const [versions, setVersions] = useState<SceneVersion[]>([])

  useEffect(() => {
    // Fetch scene versions from API
    // This is where you'd make an API call to get the scene history
  }, [sceneId])

  return (
    <div className="space-y-4">
      <h3 className="text-lg font-semibold">Scene History</h3>
      <ScrollArea className="h-[300px] w-full rounded-md border">
        {versions.map((version) => (
          <div
            key={version.version}
            className="p-2 hover:bg-gray-100 cursor-pointer"
            onClick={() => onRevertToVersion(version)}
          >
            <p className="font-medium">Version {version.version}</p>
            <p className="text-sm text-gray-500">{version.timestamp.toLocaleString()}</p>
          </div>
        ))}
      </ScrollArea>
    </div>
  )
}

================
File: features/scenes/SceneNotes.tsx
================
import React, { useState } from 'react'
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Textarea } from "@/components/ui/textarea"

interface Note {
  id: string
  content: string
  timestamp: Date
}

interface SceneNotesProps {
  sceneId: string
  initialNotes: Note[]
  onAddNote: (sceneId: string, note: Note) => void
}

export function SceneNotes({ sceneId, initialNotes, onAddNote }: SceneNotesProps) {
  const [notes, setNotes] = useState<Note[]>(initialNotes)
  const [newNote, setNewNote] = useState('')

  const handleAddNote = () => {
    if (newNote.trim()) {
      const note: Note = {
        id: Date.now().toString(),
        content: newNote,
        timestamp: new Date()
      }
      setNotes([...notes, note])
      onAddNote(sceneId, note)
      setNewNote('')
    }
  }

  return (
    <div className="space-y-4">
      <h3 className="text-lg font-semibold">Scene Notes</h3>
      <ScrollArea className="h-[200px] w-full rounded-md border p-4">
        {notes.map((note) => (
          <div key={note.id} className="mb-4 p-2 bg-gray-100 rounded">
            <p className="text-sm">{note.content}</p>
            <p className="text-xs text-gray-500 mt-1">
              {note.timestamp.toLocaleString()}
            </p>
          </div>
        ))}
      </ScrollArea>
      <div className="flex space-x-2">
        <Textarea
          value={newNote}
          onChange={(e) => setNewNote(e.target.value)}
          placeholder="Add a new note..."
          className="flex-grow"
        />
        <Button onClick={handleAddNote}>Add Note</Button>
      </div>
    </div>
  )
}

================
File: features/scenes/SceneOutline.tsx
================
// components/SceneOutline.tsx
import React from 'react';
import { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Pencil, Trash } from 'lucide-react';
import { Scene } from '@/lib/types/types';

interface SceneOutlineProps {
  scenes: Scene[];
  onReorder: (scenes: Scene[]) => void;
  onEdit: (sceneId: string) => void;
  onDelete: (sceneId: string) => void;
}

export const SceneOutline: React.FC<SceneOutlineProps> = ({ scenes, onReorder, onEdit, onDelete }) => {
  const handleDragEnd = (result: DropResult) => {
    if (!result.destination) return;

    const newScenes = Array.from(scenes);
    const [reorderedScene] = newScenes.splice(result.source.index, 1);
    newScenes.splice(result.destination.index, 0, reorderedScene);

    onReorder(newScenes);
  };

  return (
    <DragDropContext onDragEnd={handleDragEnd}>
      <Droppable droppableId="scenes">
        {(provided) => (
          <div {...provided.droppableProps} ref={provided.innerRef}>
            {scenes.map((scene, index) => (
              <Draggable key={scene.id} draggableId={scene.id} index={index}>
                {(provided) => (
                  <Card
                    ref={provided.innerRef}
                    {...provided.draggableProps}
                    {...provided.dragHandleProps}
                    className="mb-2"
                  >
                    <CardContent className="p-2 flex justify-between items-center">
                      <span>{scene.title}</span>
                      <div>
                        <Button variant="ghost" size="sm" onClick={() => onEdit(scene.id)}>
                          <Pencil className="h-4 w-4" />
                        </Button>
                        <Button variant="ghost" size="sm" onClick={() => onDelete(scene.id)}>
                          <Trash className="h-4 w-4" />
                        </Button>
                      </div>
                    </CardContent>
                  </Card>
                )}
              </Draggable>
            ))}
            {provided.placeholder}
          </div>
        )}
      </Droppable>
    </DragDropContext>
  );
};

================
File: features/script/ScriptEditor.tsx
================
// components/ScriptEditor.tsx
import React, { useState, useEffect } from 'react';
import { Textarea } from "@/components/ui/textarea";

const ScriptEditor: React.FC = () => {
  const [content, setContent] = useState('');

  useEffect(() => {
    // Load saved content or set initial content
    const savedContent = localStorage.getItem('scriptContent');
    if (savedContent) {
      setContent(savedContent);
    }
  }, []);

  const handleContentChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    const newContent = e.target.value;
    setContent(newContent);
    localStorage.setItem('scriptContent', newContent);
  };

  return (
    <div className="h-full w-full bg-white p-8">
      <Textarea
        value={content}
        onChange={handleContentChange}
        className="w-full h-full resize-none border-none focus:outline-none focus:ring-0 text-lg leading-relaxed font-mono"
        placeholder="Start writing your screenplay..."
        style={{
          minHeight: 'calc(100vh - 4rem)',
        }}
      />
    </div>
  );
};

export default ScriptEditor;

================
File: features/story/StoryStructure.tsx
================
import React, { useState } from 'react'
import { Scene } from '@/lib/types/types'
import { Button } from "@/components/ui/button"
import { Select } from "@/components/ui/select"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"

interface StoryStructureProps {
  scenes: Scene[]
  onUpdateScenes: (updatedScenes: Scene[]) => void
}

const threeActStructure = [
  { name: 'Act 1: Setup', percentage: 25 },
  { name: 'Act 2: Confrontation', percentage: 50 },
  { name: 'Act 3: Resolution', percentage: 25 },
]

const heroJourney = [
  { name: 'Ordinary World', percentage: 10 },
  { name: 'Call to Adventure', percentage: 5 },
  { name: 'Refusal of the Call', percentage: 5 },
  { name: 'Meeting the Mentor', percentage: 5 },
  { name: 'Crossing the Threshold', percentage: 10 },
  { name: 'Tests, Allies, Enemies', percentage: 20 },
  { name: 'Approach to the Inmost Cave', percentage: 10 },
  { name: 'Ordeal', percentage: 10 },
  { name: 'Reward', percentage: 5 },
  { name: 'The Road Back', percentage: 10 },
  { name: 'Resurrection', percentage: 5 },
  { name: 'Return with the Elixir', percentage: 5 },
]

export function StoryStructure({ scenes, onUpdateScenes }: StoryStructureProps) {
  const [selectedStructure, setSelectedStructure] = useState('threeAct')

  const applyStructure = () => {
    const structure = selectedStructure === 'threeAct' ? threeActStructure : heroJourney
    const totalScenes = scenes.length
    let sceneIndex = 0

    const updatedScenes = structure.flatMap(phase => {
      const phaseSceneCount = Math.round((phase.percentage / 100) * totalScenes)
      const phaseScenes = scenes.slice(sceneIndex, sceneIndex + phaseSceneCount).map(scene => ({
        ...scene,
        storyPhase: phase.name
      }))
      sceneIndex += phaseSceneCount
      return phaseScenes
    })

    onUpdateScenes(updatedScenes)
  }

  return (
    <div className="space-y-4">
      <h3 className="text-lg font-semibold">Story Structure</h3>
      <div className="flex space-x-2">
        <Select
          value={selectedStructure}
          onValueChange={setSelectedStructure}
        >
          <option value="threeAct">Three-Act Structure</option>
          <option value="heroJourney">Hero's Journey</option>
        </Select>
        <Button onClick={applyStructure}>Apply Structure</Button>
      </div>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {(selectedStructure === 'threeAct' ? threeActStructure : heroJourney).map((phase, index) => (
          <Card key={index}>
            <CardHeader>
              <CardTitle>{phase.name}</CardTitle>
            </CardHeader>
            <CardContent>
              <p>{phase.percentage}% of the story</p>
              <p>{scenes.filter(scene => scene.storyPhase === phase.name).length} scenes</p>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  )
}

================
File: features/workspace/Overview.tsx
================
// components/workspace/Overview.tsx
import React from 'react'
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { OverviewStat } from '@/lib/types/types'

interface OverviewProps {
  stats: OverviewStat[]
}

export function Overview({ stats }: OverviewProps) {
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-8">
      {stats.map((stat, index) => (
        <Card key={index}>
          <CardHeader>
            <CardTitle>{stat.title}</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-3xl font-bold">{stat.value}</p>
          </CardContent>
        </Card>
      ))}
    </div>
  )
}

export default Overview

================
File: features/workspace/TaskItem.tsx
================
import React from 'react'
import { Badge } from "@/components/ui/badge"
import { Task } from '@/lib/types/types'

interface TaskItemProps {
  task: Task
}

export function TaskItem({ task }: TaskItemProps) {
  return (
    <li className="flex items-center justify-between bg-gray-50 p-4 rounded-lg">
      <div>
        <h4 className="font-medium">{task.title}</h4>
        <p className="text-sm text-gray-500">{task.project}</p>
      </div>
      <div className="flex items-center space-x-4">
        <Badge variant={task.status === "in-progress" ? "default" : "secondary"}>
          {task.status === "in-progress" ? "In Progress" : "Pending"}
        </Badge>
        <span className="text-sm text-gray-500">{task.dueDate}</span>
      </div>
    </li>
  )
}

================
File: features/workspace/TaskList.tsx
================
import React from 'react'
import { Card, CardContent } from "@/components/ui/card"
import { TaskItem } from './TaskItem'
import { Task } from '@/lib/types/types'

interface TaskListProps {
  tasks: Task[]
}

export function TaskList({ tasks }: TaskListProps) {
  return (
    <Card>
      <CardContent className="p-6">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-2xl font-semibold">Tasks</h2>
        </div>
        <p className="text-gray-600 mb-6">Manage your tasks and track your progress with our powerful task management tools.</p>
        <ul className="space-y-4">
          {tasks.map(task => (
            <TaskItem key={task.id} task={task} />
          ))}
        </ul>
      </CardContent>
    </Card>
  )
}

================
File: features/workspace/VisualizationCharts.tsx
================
import React from 'react'
import { Card, CardContent } from "@/components/ui/card"
import { AreaChart, Area, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts'
import { Project, ActivityData } from '@/lib/types/types'

interface VisualizationChartsProps {
  activityData: ActivityData[]
  projects: Project[]
}

export function VisualizationCharts({ activityData, projects }: VisualizationChartsProps) {
  return (
    <div className="grid grid-cols-2 gap-8 mb-8">
      <Card>
        <CardContent className="p-6">
          <h3 className="text-xl font-semibold mb-4">Writing Activity</h3>
          <ResponsiveContainer width="100%" height={200}>
            <AreaChart data={activityData}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="date" />
              <YAxis />
              <Tooltip />
              <Area type="monotone" dataKey="words" stroke="#8884d8" fill="#8884d8" />
            </AreaChart>
          </ResponsiveContainer>
        </CardContent>
      </Card>
      <Card>
        <CardContent className="p-6">
          <h3 className="text-xl font-semibold mb-4">Project Progress</h3>
          <ResponsiveContainer width="100%" height={200}>
            <BarChart data={projects.filter(p => p.status === "active")}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="title" />
              <YAxis />
              <Tooltip />
              <Bar dataKey="progress" fill="#82ca9d" />
            </BarChart>
          </ResponsiveContainer>
        </CardContent>
      </Card>
    </div>
  )
}

================
File: styles/custom.css
================
.embla {
    max-width: 48rem;
    margin: auto;
    --slide-height: 19rem;
    --slide-spacing: 1rem;
    --slide-size: 80%;
  }
  .embla__viewport {
    overflow: hidden;
  }
  .embla__container {
    display: flex;
    touch-action: pan-y pinch-zoom;
    margin-left: calc(var(--slide-spacing) * -1);
  }
  .embla__slide {
    flex: 0 0 var(--slide-size);
    min-width: 0;
    padding-left: var(--slide-spacing);
    position: relative;
  }
  .embla__slide__img {
    display: block;
    height: var(--slide-height);
    width: 100%;
    object-fit: cover;
  }
  .embla__parallax {
    height: 100%;
    overflow: hidden;
  }
  .embla__parallax__layer {
    position: relative;
    height: 100%;
    width: 100%;
  }
  .embla__parallax__img {
    max-width: none;
    width: calc(100% + (var(--slide-spacing) * 2));
    margin-left: calc(var(--slide-spacing) * -1);
  }
  .embla__controls {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-top: 1.8rem;
  }
  .embla__buttons {
    display: flex;
    gap: 0.6rem;
  }
  .embla__button {
    -webkit-appearance: none;
    appearance: none;
    background-color: transparent;
    touch-action: manipulation;
    display: inline-flex;
    text-decoration: none;
    cursor: pointer;
    border: 0;
    padding: 0;
    margin: 0;
    box-shadow: inset 0 0 0 0.2rem var(--detail-medium-contrast);
    width: 3.6rem;
    height: 3.6rem;
    z-index: 1;
    border-radius: 50%;
    color: var(--text-body);
    display: flex;
    align-items: center;
    justify-content: center;
  }
  .embla__button:disabled {
    color: var(--detail-high-contrast);
  }
  .embla__button__svg {
    width: 35%;
    height: 35%;
  }
  .embla__dots {
    display: flex;
    flex-wrap: wrap;
    justify-content: flex-end;
    align-items: center;
    margin-right: calc((2.6rem - 1.4rem) / 2 * -1);
  }
  .embla__dot {
    -webkit-appearance: none;
    appearance: none;
    background-color: transparent;
    touch-action: manipulation;
    display: inline-flex;
    text-decoration: none;
    cursor: pointer;
    border: 0;
    padding: 0;
    margin: 0;
    width: 2.6rem;
    height: 2.6rem;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  .embla__dot:after {
    box-shadow: inset 0 0 0 0.2rem var(--detail-medium-contrast);
    width: 1.4rem;
    height: 1.4rem;
    border-radius: 50%;
    display: flex;
  align-items: center;
  content: '';
}
.embla__dot--selected:after {
  box-shadow: inset 0 0 0 0.2rem var(--text-body);
}

/* Custom styles for project cards */
.embla__slide__content {
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  padding: 1rem;
  background: linear-gradient(to top, rgba(0,0,0,0.8), rgba(0,0,0,0));
  color: white;
}

.embla__slide__title {
  font-size: 1.2rem;
  font-weight: bold;
  margin-bottom: 0.5rem;
}

.embla__slide__description {
  font-size: 0.9rem;
  margin-bottom: 0.5rem;
}

.embla__slide__meta {
  display: flex;
  justify-content: space-between;
  align-items: center;
  font-size: 0.8rem;
}

.embla__slide__progress {
  margin-top: 0.5rem;
}

.embla__slide__button {
  margin-top: 0.5rem;
  width: 100%;
}

/* Container with dark mode support */
.editor-container {
  background-color: var(--background-color);
  color: var(--text-color);
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 40px;
  transition: background-color 0.3s, color 0.3s;
}

.editor-container.dark-mode {
  --background-color: #1e1e1e;
  --text-color: #f5f5f5;
}

.editor-container {
  --background-color: #f0f0f0;
  --text-color: #333;
}

/* Fixed Header and Footer */
.fixed-header, .fixed-footer {
  position: fixed;
  width: 100%;
  background-color: var(--background-color);
  text-align: center;
  padding: 10px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  z-index: 1000;
}

.fixed-header {
  top: 0;
}

.fixed-footer {
  bottom: 0;
  display: flex;
  justify-content: space-between;
  padding: 10px 20px;
}

/* Editor Area */
.editor {
  background-color: #ffffff;
  width: 8.5in; /* US Letter size width */
  min-height: 11in; /* US Letter size height */
  padding: 1in;
  font-family: 'Courier', monospace;
  font-size: 12pt;
  line-height: 1.5;
  box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
  overflow-y: auto;
  outline: none;
  border: none;
  max-width: 100%;
  margin-top: 60px; /* Adjust for header height */
  margin-bottom: 60px; /* Adjust for footer height */
}

/* Contextual Toolbar */
.toolbar {
  position: fixed;
  top: 50px; /* Adjust position */
  left: 50%;
  transform: translateX(-50%);
  background-color: #fff;
  padding: 5px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  border-radius: 4px;
  display: flex;
  gap: 8px;
  z-index: 1001;
}

/* Screenplay Elements */
.screenplay-element {
  margin: 12px 0;
}

/* Scene Heading */
.scene-heading {
  font-weight: bold;
  text-transform: uppercase;
  text-align: left;
  margin-bottom: 20px;
}

/* Action Description */
.action {
  text-align: left;
  margin-bottom: 12px;
}

/* Character Name */
.character {
  text-align: center;
  margin-top: 20px;
  margin-bottom: 10px;
}

/* Dialogue Text */
.dialogue {
  text-align: left;
  margin-left: 2.5in; /* Align dialogue towards the center */
  margin-bottom: 20px;
}

/* Transition */
.transition {
  text-align: right;
  margin-top: 20px;
  margin-bottom: 10px;
}

================
File: styles/embla.css
================
/* styles/embla.css */
.embla__slide__content {
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  background: white;
  transform: translateY(100%);
  transition: transform 0.3s ease-in-out;
}

.embla__slide:hover .embla__slide__content {
  transform: translateY(0);
}

.embla__slide__title {
  font-size: 1.25rem;
  font-weight: 500;
}

.embla__slide__description {
  margin-top: 0.5rem;
  color: var(--muted-foreground);
}

.embla__slide__meta {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-top: 1rem;
}

.embla__slide__progress {
  flex: 1;
  margin-right: 1rem;
}

================
File: package.json
================
{
  "name": "screenplay-app",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "@emotion/react": "^11.13.3",
    "@hookform/resolvers": "^3.9.0",
    "@radix-ui/react-alert-dialog": "^1.1.1",
    "@radix-ui/react-avatar": "^1.1.0",
    "@radix-ui/react-dialog": "^1.1.1",
    "@radix-ui/react-dropdown-menu": "^2.1.1",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-progress": "^1.1.0",
    "@radix-ui/react-scroll-area": "^1.1.0",
    "@radix-ui/react-select": "^2.1.1",
    "@radix-ui/react-separator": "^1.1.0",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-switch": "^1.1.0",
    "@radix-ui/react-tabs": "^1.1.0",
    "@radix-ui/react-toast": "^1.2.1",
    "@radix-ui/react-toggle-group": "^1.1.0",
    "@types/node": "^22.5.0",
    "@types/react": "^18.3.4",
    "@types/react-beautiful-dnd": "^13.1.8",
    "@types/react-dom": "^18.3.0",
    "autoprefixer": "^10.4.20",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "draft-js": "^0.11.7",
    "embla-carousel": "^8.2.0",
    "embla-carousel-react": "^8.2.0",
    "framer-motion": "^10.18.0",
    "lucide-react": "^0.436.0",
    "next": "^14.2.6",
    "next-themes": "^0.3.0",
    "postcss": "^8.4.41",
    "react": "^18.3.1",
    "react-beautiful-dnd": "^13.1.1",
    "react-dnd": "^16.0.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.53.0",
    "react-hotkeys-hook": "^4.5.1",
    "react-progress": "^0.0.12",
    "react-progress-bar": "^0.1.0",
    "react-switch": "^7.0.0",
    "recharts": "^2.12.7",
    "socket.io-client": "^4.7.5",
    "tailwind-merge": "^2.5.2",
    "tailwindcss": "^3.4.10",
    "tailwindcss-animate": "^1.0.7",
    "typescript": "^5.5.4",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "@shadcn/ui": "^0.0.4",
    "@types/draft-js": "^0.11.18",
    "eslint": "^8.57.0",
    "eslint-config-next": "^14.2.6"
  }
}

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
module.exports = {
  darkMode: ["class"],
  content: [
    './pages/**/*.{ts,tsx}',
    './components/**/*.{ts,tsx}',
    './app/**/*.{ts,tsx}',
    './src/**/*.{ts,tsx}',
  ],
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: 0 },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: 0 },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
      padding: {
        '80': '20rem',
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
}
